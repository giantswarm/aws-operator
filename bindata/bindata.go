// Code generated by go-bindata.
// sources:
// templates/decrypt-tls-assets
// templates/decrypt-tls-assets.service
// templates/user-data.sh
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDecryptTlsAssets = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\x4f\x6f\xd4\x3e\x10\x3d\x3b\x9f\x62\x7e\xfd\x2d\x6a\x8b\xea\x38\x2c\xdd\xa5\xb4\x0a\x12\x67\x0e\x20\x38\xc0\x81\x8b\xe3\x8c\x37\x56\x1c\x3b\xf5\xd8\xdb\x46\x6d\xbf\x3b\xca\x66\x77\x1b\x50\x91\xc8\x25\xf2\xfc\x79\xef\xf9\xcd\xf8\xff\xff\x44\x65\x9c\xa8\x24\x35\xc0\x31\xcb\x42\x1b\x21\x24\x07\x3f\x33\xc6\xf9\xd6\xdb\xd4\x61\x49\x64\x2f\x5a\xe3\xea\xb2\xf1\x14\x2f\xc8\xa7\xa0\xb0\x14\x18\x95\x68\x53\x85\xc1\x61\x44\x12\x63\x51\x40\x59\x7f\x76\x76\x28\xb5\xb4\x84\x13\x46\xe7\x93\x8b\xe5\x0c\x29\xca\xb0\xc1\xf8\x52\xff\xd4\x90\x92\xa9\xb9\x36\x16\x39\xc9\x2d\x96\x62\x2b\x83\x08\xc9\x09\xe5\x03\x7a\x12\x35\xaa\x30\xf4\x91\x47\x4b\x5c\x12\x61\xa4\x7c\xec\xf8\x4d\x70\xed\xe8\x2f\x82\x03\x92\xb7\xdb\x5c\x79\xa7\x9f\xd5\xc6\x90\x10\xf6\x4a\x61\x06\x31\x57\x3a\x6b\x9c\xa8\x1c\xc6\x1d\xfc\x74\x8a\x21\x51\xe4\x2d\x0e\xc4\x75\xf0\x1d\x6f\x62\xec\x69\x4c\xdd\x26\x39\xe4\xc6\x1f\xd4\xcb\x3b\x52\xd6\x5c\x17\xcb\x95\x7c\xbb\x7a\xa7\x8b\xd5\xf2\x72\xa9\x6b\x59\xaf\xe5\xd5\x1b\xbc\x92\xeb\x6a\xb5\x2c\x8a\xf7\x57\x52\xae\x57\x72\x5d\x14\xc0\x39\xde\xa3\x2a\x67\x33\xe2\x23\x2a\xe3\xa8\x76\xff\x53\x54\x8d\x87\xbd\x27\xc6\x6d\x20\x5a\x82\xc9\x96\x8c\x31\x6a\x7c\x1f\x81\x13\xb8\x64\xed\xc6\xfa\x2a\x63\x4c\xfb\x00\xe8\xd4\x27\x1c\xc0\x38\x58\x9c\x69\xe3\x6a\x78\x69\x18\xdc\xc9\x0e\xe1\xe4\x75\xde\x63\x97\xa3\x53\x27\xe7\x37\x50\xfb\x8c\x31\xf6\x27\xe7\x62\xc2\x1b\x53\xba\x5c\x9c\x75\x6d\xc4\xae\x3f\x44\xf3\x1f\xfb\xef\x7c\xcc\x8b\x44\x61\x77\x19\x79\xb7\xb3\x87\x31\xc6\x79\xc0\x8d\xf1\x0e\x1e\x1e\xf2\x8f\xdf\xbf\xe5\x5f\x77\xa7\xa7\x27\x68\x3b\x3a\xb0\x1c\x4b\x95\xe9\x1b\x0c\x11\xef\x23\xaf\xac\xaf\x60\xdc\x93\xea\x5a\x88\x3d\xd9\xb1\xce\xa7\xd8\xa7\x08\x63\xe1\x31\x76\x9b\x30\x0c\xf0\xc5\x4a\xe3\x9e\xe3\x8f\x50\x49\xc2\xf5\x25\xf0\x1a\x3e\xc0\x42\x8f\xb1\x6e\x0b\x5c\xc3\x42\xc3\xe2\x61\x82\x7d\x35\xde\xff\x29\x63\xac\xf6\x0e\x6f\xb2\x83\x03\xde\x61\x7e\xba\x7f\x32\x1d\xcc\x36\xf7\x9f\x97\xf6\xf1\x11\xae\x7f\x05\x00\x00\xff\xff\x0c\xaf\x0b\xcc\x82\x03\x00\x00")

func templatesDecryptTlsAssetsBytes() ([]byte, error) {
	return bindataRead(
		_templatesDecryptTlsAssets,
		"templates/decrypt-tls-assets",
	)
}

func templatesDecryptTlsAssets() (*asset, error) {
	bytes, err := templatesDecryptTlsAssetsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/decrypt-tls-assets", size: 898, mode: os.FileMode(420), modTime: time.Unix(1489487906, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDecryptTlsAssetsService = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\xcb\x31\x0a\x02\x31\x10\x05\xd0\x7e\x4e\xb1\x17\x58\x72\x82\xed\x62\x67\x17\xad\x42\x8a\x38\x7e\x61\x40\x92\x30\xf3\x11\xbd\xbd\xc5\x1e\xe0\xd5\xfb\x30\x36\xc9\x08\x75\x5b\xb4\x39\x8e\x0c\xf5\xdf\xe2\x76\xbb\x96\x4d\xe1\xb4\x97\x69\x27\x42\xa4\x16\xf8\xc7\x14\x4d\x2e\x5f\x68\x61\x77\x1e\x69\x2e\xa6\x87\x8d\xf4\x3c\xd9\xce\x77\xec\x3d\x02\x8c\x7f\x00\x00\x00\xff\xff\x6b\x52\x84\x3d\x5c\x00\x00\x00")

func templatesDecryptTlsAssetsServiceBytes() ([]byte, error) {
	return bindataRead(
		_templatesDecryptTlsAssetsService,
		"templates/decrypt-tls-assets.service",
	)
}

func templatesDecryptTlsAssetsService() (*asset, error) {
	bytes, err := templatesDecryptTlsAssetsServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/decrypt-tls-assets.service", size: 92, mode: os.FileMode(420), modTime: time.Unix(1489487906, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUserDataSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\xd1\x6f\xd3\x30\x10\xc6\xdf\xf3\x57\x1c\x82\xc7\x3a\x0e\xed\x1a\xca\xa4\x20\x0d\x36\xa4\x49\x20\xa4\x6d\xbc\x21\xa1\xab\x73\x69\xad\x26\x76\xf0\x9d\xd3\x95\x90\xff\x1d\x2d\xdb\x0a\x5d\x41\x7b\xb3\x7d\xdf\xf7\xfd\xec\xf3\xbd\x7c\xa1\x97\xd6\xe9\x25\xf2\x3a\x49\x52\xd0\x24\x46\x93\xeb\x6c\xf0\xae\x21\x27\xc9\xd7\xeb\x8b\xab\xf3\xb3\x9b\xb3\xef\x1f\x2f\x3f\x5d\x14\x7d\x9f\x7e\x46\xb3\xb6\x8e\x6e\x76\x2d\x0d\x43\x92\xe8\xc8\x61\x4c\x08\x1b\x81\x10\x1d\x7c\x4b\x00\x00\x94\x72\x24\xc5\xda\xb3\xec\x0f\x3a\x5f\xc7\x86\x8a\xd2\xf1\x64\x63\x5d\x39\x16\x27\xec\x63\x30\x54\x8c\xd8\x40\xec\xeb\x2e\x35\xde\x55\x93\x40\x58\x7e\x71\xf5\xae\x90\x10\x09\x94\x6a\x7c\x74\x02\x7f\x45\x08\x86\x15\xc9\x91\x11\x9e\xe2\x70\xcb\xe4\xba\x7f\x10\x3b\x0c\x3a\x44\xa7\x8d\x0f\xe4\xf9\x0f\xb0\xc2\x9a\x8f\x88\x0f\x29\x8f\xd0\x43\xef\x1e\x29\x21\xb2\xa8\x0d\xed\x58\x55\xc1\x37\x6a\x2d\xd2\x3e\x56\x7f\x44\xdc\xa5\xd6\x3f\x58\x34\x6e\xd9\xd4\xf6\x34\x9b\xce\x71\x36\x7f\x53\x65\xf3\xe9\xc9\xb4\x2a\xb1\xcc\x71\xf1\x9a\x16\x98\x2f\xe7\xd3\x2c\x7b\xbb\x40\xcc\xe7\x98\x67\x19\x28\x05\xb8\x65\xe0\x19\x28\x15\x68\x65\xbd\x83\xbe\x4f\xaf\xc6\xd5\x30\x80\x69\x81\x67\xa7\x5a\xf7\x7d\x7a\x3d\x7b\x1f\xcd\x86\x64\x18\xee\x76\x1f\xea\xc8\x42\xe1\xf2\x7c\x18\xb4\xa9\x7d\x2c\xef\x9a\x64\x57\xfa\xd5\xc1\xbf\xc2\x93\x17\x69\xa1\xa6\x4d\xe5\x56\x92\x25\x32\xe5\x27\xa0\xca\xff\x4a\xe0\x17\xac\xa2\xfb\x69\x5b\x78\x77\xa4\x39\xa4\x24\x74\x4b\x06\xf6\x03\x73\xaf\x51\xe3\xad\xac\xb3\x02\xea\xbe\x6b\x95\xad\xe9\x99\xa4\xdf\x01\x00\x00\xff\xff\x77\xa0\xed\xaf\xb5\x02\x00\x00")

func templatesUserDataShBytes() ([]byte, error) {
	return bindataRead(
		_templatesUserDataSh,
		"templates/user-data.sh",
	)
}

func templatesUserDataSh() (*asset, error) {
	bytes, err := templatesUserDataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/user-data.sh", size: 693, mode: os.FileMode(420), modTime: time.Unix(1489487906, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/decrypt-tls-assets": templatesDecryptTlsAssets,
	"templates/decrypt-tls-assets.service": templatesDecryptTlsAssetsService,
	"templates/user-data.sh": templatesUserDataSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"decrypt-tls-assets": &bintree{templatesDecryptTlsAssets, map[string]*bintree{}},
		"decrypt-tls-assets.service": &bintree{templatesDecryptTlsAssetsService, map[string]*bintree{}},
		"user-data.sh": &bintree{templatesUserDataSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

