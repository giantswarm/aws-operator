// Code generated by go-bindata.
// sources:
// templates/decrypt-tls-assets
// templates/decrypt-tls-assets.service
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDecryptTlsAssets = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xcd\x6e\xd4\x30\x10\x3e\x3b\x4f\x31\x94\xa0\xb6\xa8\x8e\x2f\x88\xc3\x56\x41\xe2\xcc\x01\x04\x07\x38\x70\x71\x9c\xc9\xc6\x8a\x63\xa7\x9e\xf1\xb6\xd1\xee\xbe\x3b\xca\x26\xbb\x0d\xa8\x48\xcd\x25\xf2\xcc\x7c\x7f\xce\xe4\xed\x1b\x55\x59\xaf\x2a\x4d\x2d\x48\xcc\xb2\xd8\x31\xc4\xe4\xe1\x77\x26\xa4\xdc\x05\x97\x7a\x2c\x89\xdc\x5d\x67\x7d\x5d\xb6\x81\xf8\x8e\x42\x8a\x06\x4b\x85\x6c\x54\x97\x2a\x8c\x1e\x19\x49\x4d\x43\x11\x75\xfd\xd5\xbb\xb1\x6c\xb4\x23\x9c\x39\xfa\x90\x3c\x97\x2b\x26\xd6\x71\x8b\xfc\x12\x7e\x06\xa4\x64\x6b\xd9\x58\x87\x92\xf4\x0e\x4b\xb5\xd3\x51\xc5\xe4\x95\x09\x11\x03\xa9\x1a\x4d\x1c\x07\x96\xec\x48\x6a\x22\x64\x2a\x26\xc4\x5f\x86\x6b\x4f\xff\x31\x1c\x91\x82\xdb\x15\x26\xf8\xe6\xd9\x2d\xc7\x84\xb0\x38\x85\x15\xc5\xda\xe9\x0a\x38\x4b\x79\xe4\x13\xfd\x7c\xe2\x98\x88\x65\x87\x23\xc9\x26\x86\x5e\xb6\xcc\x03\x4d\xad\x87\xa4\xc7\xc2\x86\xb3\x7b\xfd\x48\xc6\xd9\x8d\xd3\x8c\xc4\x20\x25\x3e\xa1\x29\x57\x5f\x40\x4e\x18\x21\xd1\x9c\xde\xd7\x68\xda\x00\x4b\x62\xeb\xb7\xc0\x8e\x60\x0e\x9d\x09\x41\x6d\x18\x18\x24\x81\x4f\xce\x6d\x5d\xa8\x32\x21\x9a\x10\x01\xbd\xf9\x82\x23\x58\x0f\xf9\x4d\x63\x7d\x0d\x2f\x5d\xb5\xf4\xba\x47\xb8\x7a\x5f\x0c\xd8\x17\xe8\xcd\xd5\xed\x3d\xd4\x21\x13\x42\xfc\xab\x99\xcf\x7c\x53\xab\x29\xf3\x9b\xbe\x63\xec\x87\x73\xb5\xf8\xb5\x3c\xb7\x53\x5f\x25\x8a\xa7\x30\xfa\xf1\x14\x5e\x08\x21\x65\xc4\xad\x0d\x1e\xf6\xfb\xe2\xf3\xcf\x1f\xc5\xf7\xd3\xe9\x78\x84\xae\xa7\xb3\xca\x65\xd4\xd8\xa1\xc5\xc8\xf8\xc4\xb2\x72\xa1\x82\x69\x0b\xaa\x8d\x52\x8b\xd8\x65\x2e\x24\x1e\x12\xc3\x34\x78\xa9\x3d\x24\x8c\x23\x7c\x73\xda\xfa\xe7\xfa\x01\x2a\x4d\xf8\xf1\x03\xc8\x1a\x3e\x41\xde\x4c\xb5\x7e\x07\xb2\x81\xbc\x81\x7c\x3f\xd3\xbe\x9b\xf2\x1f\x33\x21\xea\xe0\xf1\x3e\x3b\xdf\x40\xf0\x58\x5c\x2f\x3f\x44\x0f\xab\xbd\x7c\xf5\x4a\x1e\x0e\xb0\xf9\x13\x00\x00\xff\xff\x9e\x65\x9b\x8d\x60\x03\x00\x00")

func templatesDecryptTlsAssetsBytes() ([]byte, error) {
	return bindataRead(
		_templatesDecryptTlsAssets,
		"templates/decrypt-tls-assets",
	)
}

func templatesDecryptTlsAssets() (*asset, error) {
	bytes, err := templatesDecryptTlsAssetsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/decrypt-tls-assets", size: 864, mode: os.FileMode(436), modTime: time.Unix(1488818822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDecryptTlsAssetsService = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\xcb\x31\x0a\x02\x31\x10\x05\xd0\x7e\x4e\xb1\x17\x58\x72\x82\xed\x62\x67\x17\xad\x42\x8a\x38\x7e\x61\x40\x92\x30\xf3\x11\xbd\xbd\xc5\x1e\xe0\xd5\xfb\x30\x36\xc9\x08\x75\x5b\xb4\x39\x8e\x0c\xf5\xdf\xe2\x76\xbb\x96\x4d\xe1\xb4\x97\x69\x27\x42\xa4\x16\xf8\xc7\x14\x4d\x2e\x5f\x68\x61\x77\x1e\x69\x2e\xa6\x87\x8d\xf4\x3c\xd9\xce\x77\xec\x3d\x02\x8c\x7f\x00\x00\x00\xff\xff\x6b\x52\x84\x3d\x5c\x00\x00\x00")

func templatesDecryptTlsAssetsServiceBytes() ([]byte, error) {
	return bindataRead(
		_templatesDecryptTlsAssetsService,
		"templates/decrypt-tls-assets.service",
	)
}

func templatesDecryptTlsAssetsService() (*asset, error) {
	bytes, err := templatesDecryptTlsAssetsServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/decrypt-tls-assets.service", size: 92, mode: os.FileMode(436), modTime: time.Unix(1488818822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/decrypt-tls-assets": templatesDecryptTlsAssets,
	"templates/decrypt-tls-assets.service": templatesDecryptTlsAssetsService,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"decrypt-tls-assets": &bintree{templatesDecryptTlsAssets, map[string]*bintree{}},
		"decrypt-tls-assets.service": &bintree{templatesDecryptTlsAssetsService, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

