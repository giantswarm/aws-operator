{
  "ignition": {
    "config": {},
    "security": {
      "tls": {}
    },
    "timeouts": {},
    "version": "2.2.0"
  },
  "networkd": {},
  "passwd": {
    "users": [
      {
        "groups": [
          "sudo",
          "docker"
        ],
        "name": "giantswarm",
        "sshAuthorizedKeys": [
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCuJvxy3FKGrfJ4XB5exEdKXiqqteXEPFzPtex6dC0lHyigtO7l+NXXbs9Lga2+Ifs0Tza92MRhg/FJ+6za3oULFo7+gDyt86DIkZkMFdnSv9+YxYe+g4zqakSV+bLVf2KP6krUGJb7t4Nb+gGH62AiUx+58Onxn5rvYC0/AXOYhkAiH8PydXTDJDPhSA/qWSWEeCQistpZEDFnaVi0e7uq/k3hWJ+v9Gz0qqChHKWWOYp3W6aiIE3G6gLOXNEBdWRrjK6xmrSmo9Toqh1G7iIV0Y6o9w5gIHJxf6+8X70DCuVDx9OLHmjjMyGnd+1c3yTFMUdugtvmeiGWE0E7ZjNSNIqWlnvYJ0E1XPBiyQ7nhitOtVvPC4kpRP7nOFiCK9n8Lr3z3p4v3GO0FU3/qvLX+ECOrYK316gtwSJMd+HIouCbaJaFGvT34peaq1uluOP/JE+rFOnszZFpCYgTY2b4lWjf2krkI/a/3NDJPnRpjoE3RjmbepkZeIdOKTCTH1xYZ3O8dWKRX8X4xORvKJO+oV2UdoZlFa/WJTmq23z4pCVm0UWDYR5C2b9fHwxh/xrPT7CQ0E+E9wmeOvR4wppDMseGQCL+rSzy2AYiQ3D8iQxk0r6T+9MyiRCfuY73p63gB3m37jMQSLHvm77MkRnYcBy61Qxk+y+ls2D0xJfqxw== giantswarm"
        ],
        "shell": "/bin/bash",
        "uid": 1000
      },
      {
        "groups": [
          "sudo",
          "docker"
        ],
        "name": "user",
        "sshAuthorizedKeys": [
          "ssh-rsa base64=="
        ],
        "shell": "/bin/bash"
      }
    ]
  },
  "storage": {
    "files": [
      {
        "contents": {
          "source": "data:text/plain;base64,dXNlcjpzc2gtcnNhIGJhc2U2ND09Cg==",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 420,
        "path": "/etc/ssh/trusted-user-ca-keys.pem"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,a2luZDogS3ViZWxldENvbmZpZ3VyYXRpb24KYXBpVmVyc2lvbjoga3ViZWxldC5jb25maWcuazhzLmlvL3YxYmV0YTEKYWRkcmVzczogJHtERUZBVUxUX0lQVjR9CnBvcnQ6IDEwMjUwCmhlYWx0aHpCaW5kQWRkcmVzczogJHtERUZBVUxUX0lQVjR9CmhlYWx0aHpQb3J0OiAxMDI0OApjbHVzdGVyRE5TOgogIC0gMTcyLjE4LjE5Mi4xMApjbHVzdGVyRG9tYWluOiBjbHVzdGVyLmxvY2FsCmV2aWN0aW9uU29mdDoKICBtZW1vcnkuYXZhaWxhYmxlOiAiNTAwTWkiCmV2aWN0aW9uSGFyZDoKICBtZW1vcnkuYXZhaWxhYmxlOiAiMjAwTWkiCmV2aWN0aW9uU29mdEdyYWNlUGVyaW9kOgogIG1lbW9yeS5hdmFpbGFibGU6ICI1cyIKZXZpY3Rpb25NYXhQb2RHcmFjZVBlcmlvZDogNjAKa3ViZVJlc2VydmVkOgogIGNwdTogMjUwbQogIG1lbW9yeTogNzY4TWkKICBlcGhlbWVyYWwtc3RvcmFnZTogMTAyNE1pCmt1YmVSZXNlcnZlZENncm91cDogL2t1YmVyZXNlcnZlZC5zbGljZQprdWJlbGV0Q2dyb3VwczogL2t1YmVyZXNlcnZlZC5zbGljZQpydW50aW1lQ2dyb3VwczogL2t1YmVyZXNlcnZlZC5zbGljZQpzeXN0ZW1SZXNlcnZlZDoKICBjcHU6IDI1MG0KICBtZW1vcnk6IDM4NE1pCnN5c3RlbVJlc2VydmVkQ2dyb3VwOiAvc3lzdGVtLnNsaWNlCmF1dGhlbnRpY2F0aW9uOgogIGFub255bW91czoKICAgIGVuYWJsZWQ6IHRydWUgIyBEZWZhdWx0cyB0byBmYWxzZSBhcyBvZiAxLjEwCiAgd2ViaG9vazoKICAgIGVuYWJsZWQ6IGZhbHNlICMgRGVhZnVsdHMgdG8gdHJ1ZSBhcyBvZiAxLjEwCmF1dGhvcml6YXRpb246CiAgbW9kZTogQWx3YXlzQWxsb3cgIyBEZWFmdWx0cyB0byB3ZWJob29rIGFzIG9mIDEuMTAK",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 420,
        "path": "/etc/kubernetes/config/kubelet.yaml.tmpl"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnCnVzZXJzOgotIG5hbWU6IGt1YmVsZXQKICB1c2VyOgogICAgY2xpZW50LWNlcnRpZmljYXRlOiAvZXRjL2t1YmVybmV0ZXMvc3NsL3dvcmtlci1jcnQucGVtCiAgICBjbGllbnQta2V5OiAvZXRjL2t1YmVybmV0ZXMvc3NsL3dvcmtlci1rZXkucGVtCmNsdXN0ZXJzOgotIG5hbWU6IGxvY2FsCiAgY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eTogL2V0Yy9rdWJlcm5ldGVzL3NzbC93b3JrZXItY2EucGVtCiAgICBzZXJ2ZXI6IGh0dHBzOi8vYXBpLjh5NWNrLms4cy5nYXVzcy5ldS1jZW50cmFsLTEuYXdzLmdpZ2FudGljLmlvCmNvbnRleHRzOgotIGNvbnRleHQ6CiAgICBjbHVzdGVyOiBsb2NhbAogICAgdXNlcjoga3ViZWxldAogIG5hbWU6IHNlcnZpY2UtYWNjb3VudC1jb250ZXh0CmN1cnJlbnQtY29udGV4dDogc2VydmljZS1hY2NvdW50LWNvbnRleHQK",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 420,
        "path": "/etc/kubernetes/kubeconfig/kubelet.yaml"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjoga3ViZXByb3h5LmNvbmZpZy5rOHMuaW8vdjFhbHBoYTEKY2xpZW50Q29ubmVjdGlvbjoKICBrdWJlY29uZmlnOiAvZXRjL2t1YmVybmV0ZXMvY29uZmlnL3Byb3h5LWt1YmVjb25maWcueWFtbApraW5kOiBLdWJlUHJveHlDb25maWd1cmF0aW9uCm1vZGU6IGlwdGFibGVzCnJlc291cmNlQ29udGFpbmVyOiAva3ViZS1wcm94eQpjbHVzdGVyQ0lEUjogMTcyLjE4LjEyOC4wLzE4Cg==",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 420,
        "path": "/etc/kubernetes/config/proxy-config.yml"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnCnVzZXJzOgotIG5hbWU6IHByb3h5CiAgdXNlcjoKICAgIGNsaWVudC1jZXJ0aWZpY2F0ZTogL2V0Yy9rdWJlcm5ldGVzL3NzbC93b3JrZXItY3J0LnBlbQogICAgY2xpZW50LWtleTogL2V0Yy9rdWJlcm5ldGVzL3NzbC93b3JrZXIta2V5LnBlbQpjbHVzdGVyczoKLSBuYW1lOiBsb2NhbAogIGNsdXN0ZXI6CiAgICBjZXJ0aWZpY2F0ZS1hdXRob3JpdHk6IC9ldGMva3ViZXJuZXRlcy9zc2wvd29ya2VyLWNhLnBlbQogICAgc2VydmVyOiBodHRwczovL2FwaS44eTVjay5rOHMuZ2F1c3MuZXUtY2VudHJhbC0xLmF3cy5naWdhbnRpYy5pbwpjb250ZXh0czoKLSBjb250ZXh0OgogICAgY2x1c3RlcjogbG9jYWwKICAgIHVzZXI6IHByb3h5CiAgbmFtZTogc2VydmljZS1hY2NvdW50LWNvbnRleHQKY3VycmVudC1jb250ZXh0OiBzZXJ2aWNlLWFjY291bnQtY29udGV4dAo=",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 420,
        "path": "/etc/kubernetes/config/proxy-kubeconfig.yaml"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnCnVzZXJzOgotIG5hbWU6IHByb3h5CiAgdXNlcjoKICAgIGNsaWVudC1jZXJ0aWZpY2F0ZTogL2V0Yy9rdWJlcm5ldGVzL3NzbC93b3JrZXItY3J0LnBlbQogICAgY2xpZW50LWtleTogL2V0Yy9rdWJlcm5ldGVzL3NzbC93b3JrZXIta2V5LnBlbQpjbHVzdGVyczoKLSBuYW1lOiBsb2NhbAogIGNsdXN0ZXI6CiAgICBjZXJ0aWZpY2F0ZS1hdXRob3JpdHk6IC9ldGMva3ViZXJuZXRlcy9zc2wvd29ya2VyLWNhLnBlbQogICAgc2VydmVyOiBodHRwczovL2FwaS44eTVjay5rOHMuZ2F1c3MuZXUtY2VudHJhbC0xLmF3cy5naWdhbnRpYy5pbwpjb250ZXh0czoKLSBjb250ZXh0OgogICAgY2x1c3RlcjogbG9jYWwKICAgIHVzZXI6IHByb3h5CiAgbmFtZTogc2VydmljZS1hY2NvdW50LWNvbnRleHQKY3VycmVudC1jb250ZXh0OiBzZXJ2aWNlLWFjY291bnQtY29udGV4dAo=",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 420,
        "path": "/etc/kubernetes/kubeconfig/kube-proxy.yaml"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2gKZG9tYWlucz0iZXRjZC44eTVjay5rOHMuZ2F1c3MuZXUtY2VudHJhbC0xLmF3cy5naWdhbnRpYy5pbyBhcGkuOHk1Y2suazhzLmdhdXNzLmV1LWNlbnRyYWwtMS5hd3MuZ2lnYW50aWMuaW8gcXVheS5pbyIKCmZvciBkb21haW4gaW4gJGRvbWFpbnM7IGRvCnVudGlsIG5zbG9va3VwICRkb21haW47IGRvCiAgICBlY2hvICJXYWl0aW5nIGZvciBkb21haW4gJGRvbWFpbiB0byBiZSBhdmFpbGFibGUiCiAgICBzbGVlcCA1CmRvbmUKCmVjaG8gIlN1Y2Nlc3NmdWxseSByZXNvbHZlZCBkb21haW4gJGRvbWFpbiIKZG9uZQo=",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 356,
        "path": "/opt/wait-for-domains"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,IyBVc2UgbW9zdCBkZWZhdWx0cyBmb3Igc3NoZCBjb25maWd1cmF0aW9uLgpTdWJzeXN0ZW0gc2Z0cCBpbnRlcm5hbC1zZnRwCkNsaWVudEFsaXZlSW50ZXJ2YWwgMTgwClVzZUROUyBubwpVc2VQQU0geWVzClByaW50TGFzdExvZyBubyAjIGhhbmRsZWQgYnkgUEFNClByaW50TW90ZCBubyAjIGhhbmRsZWQgYnkgUEFNCiMgTm9uIGRlZmF1bHRzICgjMTAwKQpDbGllbnRBbGl2ZUNvdW50TWF4IDIKUGFzc3dvcmRBdXRoZW50aWNhdGlvbiBubwpUcnVzdGVkVXNlckNBS2V5cyAvZXRjL3NzaC90cnVzdGVkLXVzZXItY2Eta2V5cy5wZW0KTWF4QXV0aFRyaWVzIDUKTG9naW5HcmFjZVRpbWUgNjAKQWxsb3dUY3BGb3J3YXJkaW5nIG5vCkFsbG93QWdlbnRGb3J3YXJkaW5nIG5vCg==",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 420,
        "path": "/etc/ssh/sshd_config"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,ZnMuaW5vdGlmeS5tYXhfdXNlcl93YXRjaGVzID0gMTYzODQKa2VybmVsLmtwdHJfcmVzdHJpY3QgPSAyCmtlcm5lbC5zeXNycSA9IDAKbmV0LmlwdjQuY29uZi5hbGwubG9nX21hcnRpYW5zID0gMQpuZXQuaXB2NC5jb25mLmFsbC5zZW5kX3JlZGlyZWN0cyA9IDAKbmV0LmlwdjQuY29uZi5kZWZhdWx0LmFjY2VwdF9yZWRpcmVjdHMgPSAwCm5ldC5pcHY0LmNvbmYuZGVmYXVsdC5sb2dfbWFydGlhbnMgPSAxCm5ldC5pcHY0LnRjcF90aW1lc3RhbXBzID0gMApuZXQuaXB2Ni5jb25mLmFsbC5hY2NlcHRfcmVkaXJlY3RzID0gMApuZXQuaXB2Ni5jb25mLmRlZmF1bHQuYWNjZXB0X3JlZGlyZWN0cyA9IDAKIyBJbmNyZWFzZWQgbW1hcGZzIGJlY2F1c2Ugc29tZSBhcHBsaWNhdGlvbnMsIGxpa2UgRVMsIG5lZWQgaGlnaGVyIGxpbWl0IHRvIHN0b3JlIGRhdGEgcHJvcGVybHkKdm0ubWF4X21hcF9jb3VudCA9IDI2MjE0NAojIEluZ3Jlc3MgY29udHJvbGxlciBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudHMKIyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMvaW5ncmVzcy1uZ2lueC9pc3N1ZXMvMTkzOQpuZXQuY29yZS5zb21heGNvbm49MzI3NjgKbmV0LmlwdjQuaXBfbG9jYWxfcG9ydF9yYW5nZT0xMDI0IDY1NTM1Cm5ldC5pcHY0LmNvbmYuYWxsLnJwX2ZpbHRlciA9IDEKbmV0LmlwdjQuY29uZi5hbGwuYXJwX2lnbm9yZSA9IDEKbmV0LmlwdjQuY29uZi5hbGwuYXJwX2Fubm91bmNlID0gMgo=",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 384,
        "path": "/etc/sysctl.d/hardening.conf"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,LXcgL3Vzci9iaW4vZG9ja2VyIC1rIGRvY2tlcgotdyAvdmFyL2xpYi9kb2NrZXIgLWsgZG9ja2VyCi13IC9ldGMvZG9ja2VyIC1rIGRvY2tlcgotdyAvZXRjL3N5c3RlbWQvc3lzdGVtL2RvY2tlci5zZXJ2aWNlLmQvMTAtZ2lhbnRzd2FybS1leHRyYS1hcmdzLmNvbmYgLWsgZG9ja2VyCi13IC9ldGMvc3lzdGVtZC9zeXN0ZW0vZG9ja2VyLnNlcnZpY2UuZC8wMS13YWl0LWRvY2tlci5jb25mIC1rIGRvY2tlcgotdyAvdXNyL2xpYi9zeXN0ZW1kL3N5c3RlbS9kb2NrZXIuc2VydmljZSAtayBkb2NrZXIKLXcgL3Vzci9saWIvc3lzdGVtZC9zeXN0ZW0vZG9ja2VyLnNvY2tldCAtayBkb2NrZXIKCg==",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 384,
        "path": "/etc/audit/rules.d/10-docker.rules"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,aXBfdnMKaXBfdnNfcnIKaXBfdnNfd3JyCmlwX3ZzX3NoCm5mX2Nvbm50cmFja19pcHY0",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 384,
        "path": "/etc/modules-load.d/ip_vs.conf"
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2ggLWUKCnRva2VuX3BhdGg9L3Zhci90b2tlbgoKdmF1bHRfdGxzX2Fzc2V0c19kZWNyeXB0KCkgewogICAgZWNobyBkZWNyeXB0aW5nIHRscyBhc3NldHMKICAgIHNob3B0IC1zIG51bGxnbG9iCiAgICBmb3IgZW5jS2V5IGluICQoZmluZCAvZXRjL2t1YmVybmV0ZXMvc3NsIC1uYW1lICIqLnBlbS5lbmMiKTsgZG8KICAgICAgZWNobyBkZWNyeXB0aW5nICRlbmNLZXkKICAgICAgZj0kKG1rdGVtcCAkZW5jS2V5LlhYWFhYWFhYKQogICAgICBjYXQgPDxFT0YgPiBkYXRhLmpzb24KewogICJjaXBoZXJ0ZXh0IjogIiQoY2F0ICRlbmNLZXkpIgp9CkVPRgogICAgICBjdXJsIC1rIFwKICAgICAgICAtLWhlYWRlciAiWC1WYXVsdC1Ub2tlbjogJChjYXQgJHRva2VuX3BhdGgpIiBcCiAgICAgICAgLS1zaWxlbnQgXAogICAgICAgIC0tcmVxdWVzdCBQT1NUIFwKICAgICAgICAtLWRhdGEgQGRhdGEuanNvbiBcCiAgICAgICAgL3YxL3RyYW5zaXQvZGVjcnlwdC8gfCBcCiAgICAgICAganEgLXIgLmRhdGEucGxhaW50ZXh0IHwgYmFzZTY0IC1kID4gJGYKICAgICAgbXYgLWYgJGYgJHtlbmNLZXklLmVuY30KICAgICAgcm0gLWYgZGF0YS5qc29uCiAgICBkb25lOwogICAgZWNobyBkb25lLgoKfQoKa21zX3Rsc19hc3NldHNfZGVjcnlwdCgpIHsKQVdTX0NMSV9JTUFHRT0icXVheS5pby9jb3Jlb3MvYXdzY2xpOjAyNWEzNTdmMDUyNDJmZGFkNmE4MWU4YTZiNTIwMDk4YWE2NWE2MDAiCgp3aGlsZSAhIHJrdCBmZXRjaCAtLXRydXN0LWtleXMtZnJvbS1odHRwcz10cnVlICR7QVdTX0NMSV9JTUFHRX07CmRvCiAgICAgICAgZWNobyAiRmFpbGVkIHRvIGZldGNoIHJrdCBpbWFnZSAke0FXU19DTElfSU1BR0V9LCByZXRyeWluZyBpbiA1IHNlYy4iCiAgICAgICAgc2xlZXAgNXMKZG9uZQplY2hvICJTdWNjZXNzZnVsbHkgZmV0Y2hlZCBya3QgaW1hZ2UgJHtBV1NfQ0xJX0lNQUdFfS4iCgpya3QgcnVuIFwKICAtLXZvbHVtZT1zc2wsa2luZD1ob3N0LHNvdXJjZT0vZXRjL2t1YmVybmV0ZXMvc3NsLHJlYWRPbmx5PWZhbHNlIFwKICAtLW1vdW50PXZvbHVtZT1zc2wsdGFyZ2V0PS9ldGMva3ViZXJuZXRlcy9zc2wgXAogIC0tdXVpZC1maWxlLXNhdmU9L3Zhci9ydW4vY29yZW9zL2RlY3J5cHQtdGxzLWFzc2V0cy51dWlkIFwKICAtLXZvbHVtZT1kbnMsa2luZD1ob3N0LHNvdXJjZT0vZXRjL3Jlc29sdi5jb25mLHJlYWRPbmx5PXRydWUgLS1tb3VudCB2b2x1bWU9ZG5zLHRhcmdldD0vZXRjL3Jlc29sdi5jb25mIFwKICAtLW5ldD1ob3N0IFwKICAtLXRydXN0LWtleXMtZnJvbS1odHRwcyBcCiAgJHtBV1NfQ0xJX0lNQUdFfSAtLWV4ZWM9L2Jpbi9iYXNoIC0tIFwKICAgIC1lYyBcCiAgICAnZWNobyBkZWNyeXB0aW5nIHRscyBhc3NldHMKICAgIHNob3B0IC1zIG51bGxnbG9iCiAgICBmb3IgZW5jS2V5IGluICQoZmluZCAvZXRjL2t1YmVybmV0ZXMvc3NsIC1uYW1lICIqLnBlbS5lbmMiKTsgZG8KICAgICAgZWNobyBkZWNyeXB0aW5nICRlbmNLZXkKICAgICAgZj0kKG1rdGVtcCAkZW5jS2V5LlhYWFhYWFhYKQogICAgICAvdXNyL2Jpbi9hd3MgXAogICAgICAgIC0tcmVnaW9uIGV1LWNlbnRyYWwtMSBrbXMgZGVjcnlwdCBcCiAgICAgICAgLS1jaXBoZXJ0ZXh0LWJsb2IgZmlsZWI6Ly8kZW5jS2V5IFwKICAgICAgICAtLW91dHB1dCB0ZXh0IFwKICAgICAgICAtLXF1ZXJ5IFBsYWludGV4dCBcCiAgICAgIHwgYmFzZTY0IC1kID4gJGYKICAgICAgbXYgLWYgJGYgJHtlbmNLZXklLmVuY30KICAgIGRvbmU7JwoKcmt0IHJtIC0tdXVpZC1maWxlPS92YXIvcnVuL2NvcmVvcy9kZWNyeXB0LXRscy1hc3NldHMudXVpZCB8fCA6Cn0KCgptYWluKCkgewoKICBrbXNfdGxzX2Fzc2V0c19kZWNyeXB0CgoKY2hvd24gLVIgZXRjZDpldGNkIC9ldGMva3ViZXJuZXRlcy9zc2wvZXRjZAp9CgptYWluCg==",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 448,
        "group": {
          "name": "root"
        },
        "path": "/opt/bin/decrypt-tls-assets",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2ggLWUKCg==",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 448,
        "group": {
          "name": "root"
        },
        "path": "/opt/bin/vault-aws-authorizer",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,CltVbml0XQpBZnRlcj12YXItbGliLWRvY2tlci5tb3VudApSZXF1aXJlcz12YXItbGliLWRvY2tlci5tb3VudAo=",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 448,
        "group": {
          "name": "root"
        },
        "path": "/etc/systemd/system/docker.service.d/01-wait-docker.conf",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,ZXRjZC1zZXJ2ZXItY2E=",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 448,
        "group": {
          "name": "root"
        },
        "path": "/etc/kubernetes/ssl/etcd/client-ca.pem.enc",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,ZXRjZC1zZXJ2ZXItY3J0",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 448,
        "group": {
          "name": "root"
        },
        "path": "/etc/kubernetes/ssl/etcd/client-crt.pem.enc",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,ZXRjZC1zZXJ2ZXIta2V5",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 448,
        "group": {
          "name": "root"
        },
        "path": "/etc/kubernetes/ssl/etcd/client-key.pem.enc",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,Y2FsaWNvLWV0Y2QtY2xpZW50LWNh",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 448,
        "group": {
          "name": "root"
        },
        "path": "/etc/kubernetes/ssl/calico/etcd-ca.enc",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,Y2FsaWNvLWV0Y2QtY2xpZW50LWNydA==",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 448,
        "group": {
          "name": "root"
        },
        "path": "/etc/kubernetes/ssl/calico/etcd-cert.enc",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,Y2FsaWNvLWV0Y2QtY2xpZW50LWtleQ==",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 448,
        "group": {
          "name": "root"
        },
        "path": "/etc/kubernetes/ssl/calico/etcd-key.enc",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,d29ya2VyLWNh",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 448,
        "group": {
          "name": "root"
        },
        "path": "/etc/kubernetes/ssl/worker-ca.pem.enc",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,d29ya2VyLWNydA==",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 448,
        "group": {
          "name": "root"
        },
        "path": "/etc/kubernetes/ssl/worker-crt.pem.enc",
        "user": {
          "name": "root"
        }
      },
      {
        "contents": {
          "source": "data:text/plain;charset=utf-8;base64,d29ya2VyLWtleQ==",
          "verification": {}
        },
        "filesystem": "root",
        "mode": 448,
        "group": {
          "name": "root"
        },
        "path": "/etc/kubernetes/ssl/worker-key.pem.enc",
        "user": {
          "name": "root"
        }
      }
    ]
  },
  "systemd": {
    "units": [
      {
        "name": "kubereserved.slice"
      },
      {
        "contents": "\n[Unit]\nDescription=Decrypt TLS certificates\nBefore=k8s-kubelet.service\nAfter=wait-for-domains.service vault-aws-authorizer.service\nRequires=wait-for-domains.service vault-aws-authorizer.service\n\n[Service]\nType=oneshot\nExecStart=/opt/bin/decrypt-tls-assets\n\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "decrypt-tls-assets.service"
      },
      {
        "contents": "\n[Unit]\nDescription=Token decryption retrieval\nBefore=k8s-kubelet.service\nAfter=wait-for-domains.service\nRequires=wait-for-domains.service\n\n[Service]\nType=oneshot\nExecStart=/opt/bin/vault-aws-authorizer\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "vault-aws-authorizer.service"
      },
      {
        "contents": "\n[Unit]\nDescription=Mount persistent volume on /var/lib/docker\n[Mount]\nWhat=/dev/disk/by-label/docker\nWhere=/var/lib/docker\nType=xfs\n[Install]\nRequiredBy=local-fs.target\n",
        "enabled": true,
        "name": "var-lib-docker.mount"
      },
      {
        "contents": "[Unit]\nDescription=Set NVME timeouts\n[Service]\nType=oneshot\nExecStart=/bin/sh -c \"\\\n  [ -d /sys/module/nvme_core/parameters ] \u0026\u0026 \\\n  echo 10 \u003e /sys/module/nvme_core/parameters/max_retries \u0026\u0026 \\\n  echo 255 \u003e /sys/module/nvme_core/parameters/io_timeout || echo 'No NVMe present.'\"\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "nvme-set-timeouts.service"
      },
      {
        "contents": "\n[Unit]\nDescription=set proper hostname for k8s\nRequires=wait-for-domains.service\nAfter=wait-for-domains.service\nBefore=k8s-kubelet.service\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nExecStart=/bin/bash -c \"hostnamectl set-hostname $(curl http://169.254.169.254/latest/meta-data/local-hostname)\"\n\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "set-hostname.service"
      },
      {
        "contents": "\n[Unit]\nDescription=log data volume\nDefaultDependencies=no\n\n[Mount]\nWhat=/dev/disk/by-label/log\nWhere=/var/log\nType=xfs\n\n[Install]\nWantedBy=local-fs-pre.target\n",
        "enabled": true,
        "name": "var-log.mount"
      },
      {
        "contents": "\n[Unit]\nDescription=kubelet volume\nDefaultDependencies=no\n\n[Mount]\nWhat=/dev/disk/by-label/kubelet\nWhere=/var/lib/kubelet\nType=xfs\n\n[Install]\nWantedBy=local-fs-pre.target\n",
        "enabled": true,
        "name": "var-lib-kubelet.mount"
      },
      {
        "contents": "[Unit]\nDescription=Change group owner for certificates to giantswarm\nWants=k8s-kubelet.service k8s-setup-network-env.service\nAfter=k8s-kubelet.service k8s-setup-network-env.service\n[Service]\nType=oneshot\nExecStart=/bin/sh -c \"find /etc/kubernetes/ssl -name '*.pem' -print | xargs -i  sh -c 'chown root:giantswarm {} \u0026\u0026 chmod 640 {}'\"\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "set-certs-group-owner-permission-giantswarm.service"
      },
      {
        "contents": "[Unit]\nDescription=Wait for etcd and k8s API domains to be available\n[Service]\nType=oneshot\nExecStart=/opt/wait-for-domains\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "wait-for-domains.service"
      },
      {
        "contents": "[Unit]\nDescription=Apply os hardening\n[Service]\nType=oneshot\nExecStartPre=-/bin/bash -c \"gpasswd -d core rkt; gpasswd -d core docker; gpasswd -d core wheel\"\nExecStartPre=/bin/bash -c \"until [ -f '/etc/sysctl.d/hardening.conf' ]; do echo Waiting for sysctl file; sleep 1s;done;\"\nExecStart=/usr/sbin/sysctl -p /etc/sysctl.d/hardening.conf\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "os-hardeing.service"
      },
      {
        "contents": "[Unit]\nDescription=k8s-setup-kubelet-config Service\nAfter=k8s-setup-network-env.service docker.service\nRequires=k8s-setup-network-env.service docker.service\n[Service]\nType=oneshot\nRemainAfterExit=yes\nTimeoutStartSec=0\nEnvironmentFile=/etc/network-environment\nExecStart=/bin/bash -c '/usr/bin/envsubst \u003c/etc/kubernetes/config/kubelet.yaml.tmpl \u003e/etc/kubernetes/config/kubelet.yaml'\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "k8s-setup-kubelet-config.service"
      },
      {
        "dropins": [
          {
            "contents": "[Service]\nCPUAccounting=true\nMemoryAccounting=true\nSlice=kubereserved.slice\n",
            "name": "10-change-cgroup.conf"
          }
        ],
        "enabled": true,
        "name": "containerd.service"
      },
      {
        "dropins": [
          {
            "contents": "[Service]\nCPUAccounting=true\nMemoryAccounting=true\nSlice=kubereserved.slice\nEnvironment=\"DOCKER_CGROUPS=--exec-opt native.cgroupdriver=cgroupfs --cgroup-parent=/kubereserved.slice --log-opt max-size=25m --log-opt max-file=2 --log-opt labels=io.kubernetes.container.hash,io.kubernetes.container.name,io.kubernetes.pod.name,io.kubernetes.pod.namespace,io.kubernetes.pod.uid\"\nEnvironment=\"DOCKER_OPT_BIP=--bip=172.18.224.1/19\"\nEnvironment=\"DOCKER_OPTS=--live-restore --icc=false --userland-proxy=false\"\n",
            "name": "10-giantswarm-extra-args.conf"
          }
        ],
        "enabled": true,
        "name": "docker.service"
      },
      {
        "contents": "[Unit]\nDescription=k8s-setup-network-env Service\nWants=network.target docker.service wait-for-domains.service\nAfter=network.target docker.service wait-for-domains.service\n[Service]\nType=oneshot\nTimeoutStartSec=0\nEnvironment=\"IMAGE=quay.io/giantswarm/k8s-setup-network-environment\"\nEnvironment=\"NAME=%p.service\"\nExecStartPre=/usr/bin/mkdir -p /opt/bin/\nExecStartPre=/usr/bin/docker pull $IMAGE\nExecStartPre=-/usr/bin/docker stop -t 10 $NAME\nExecStartPre=-/usr/bin/docker rm -f $NAME\nExecStart=/usr/bin/docker run --rm --net=host -v /etc:/etc --name $NAME $IMAGE\nExecStop=-/usr/bin/docker stop -t 10 $NAME\nExecStopPost=-/usr/bin/docker rm -f $NAME\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "k8s-setup-network-env.service"
      },
      {
        "contents": "[Unit]\nWants=k8s-setup-network-env.service k8s-setup-kubelet-config.service\nAfter=k8s-setup-network-env.service k8s-setup-kubelet-config.service\nDescription=k8s-kubelet\nStartLimitIntervalSec=0\n\n[Service]\nTimeoutStartSec=300\nRestart=always\nRestartSec=0\nTimeoutStopSec=10\nCPUAccounting=true\nMemoryAccounting=true\nSlice=kubereserved.slice\nEnvironmentFile=/etc/network-environment\nEnvironment=\"IMAGE=quay.io/giantswarm/hyperkube:v1.14.6\"\nEnvironment=\"NAME=%p.service\"\nEnvironment=\"PATH=/opt/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nExecStartPre=/usr/bin/docker pull $IMAGE\nExecStartPre=-/usr/bin/docker stop -t 10 $NAME\nExecStartPre=-/usr/bin/docker rm -f $NAME\nExecStart=/bin/sh -c \"/usr/bin/docker run --rm --pid=host --net=host --privileged=true \\\n-v /:/rootfs:ro,rshared \\\n-v /sys:/sys:ro \\\n-v /dev:/dev:rw \\\n-v /var/log:/var/log:rw \\\n-v /run/calico/:/run/calico/:rw \\\n-v /run/docker/:/run/docker/:rw \\\n-v /run/docker.sock:/run/docker.sock:rw \\\n-v /usr/bin/docker:/usr/bin/docker \\\n-v /run/metadata/torcx:/run/metadata/torcx \\\n-v /run/torcx/:/run/torcx/ \\\n-v /usr/lib/os-release:/etc/os-release \\\n-v /usr/share/ca-certificates/:/etc/ssl/certs \\\n-v /var/lib/calico/:/var/lib/calico \\\n-v /var/lib/docker/:/var/lib/docker:rw,rshared \\\n-v /var/lib/kubelet/:/var/lib/kubelet:rw,rshared \\\n-v /etc/kubernetes/ssl/:/etc/kubernetes/ssl/ \\\n-v /etc/kubernetes/config/:/etc/kubernetes/config/ \\\n-v /etc/kubernetes/kubeconfig/:/etc/kubernetes/kubeconfig/ \\\n-v /etc/cni/net.d/:/etc/cni/net.d/ \\\n-v /opt/cni/bin/:/opt/cni/bin/ \\\n-v /opt/bin:/opt/bin \\\n-v /usr/sbin/iscsiadm:/usr/sbin/iscsiadm \\\n-v /etc/iscsi/:/etc/iscsi/ \\\n-v /dev/disk/by-path/:/dev/disk/by-path/ \\\n-v /dev/mapper/:/dev/mapper/ \\\n-v /lib/modules:/lib/modules \\\n-v /usr/sbin/mkfs.xfs:/usr/sbin/mkfs.xfs \\\n-v /usr/lib64/libxfs.so.0:/usr/lib/libxfs.so.0 \\\n-v /usr/lib64/libxcmd.so.0:/usr/lib/libxcmd.so.0 \\\n-v /usr/lib64/libreadline.so.7:/usr/lib/libreadline.so.7 \\\n-e ETCD_CA_CERT_FILE=/etc/kubernetes/ssl/etcd/client-ca.pem \\\n-e ETCD_CERT_FILE=/etc/kubernetes/ssl/etcd/client-crt.pem \\\n-e ETCD_KEY_FILE=/etc/kubernetes/ssl/etcd/client-key.pem \\\n-e PATH \\\n--name $NAME \\\n$IMAGE \\\n/hyperkube kubelet \\\n--node-ip=${DEFAULT_IPV4} \\\n--config=/etc/kubernetes/config/kubelet.yaml \\\n--containerized \\\n--enable-server \\\n--logtostderr=true \\\n--cloud-provider=aws \\\n--image-pull-progress-deadline=1m \\\n--network-plugin=cni \\\n--register-node=true \\\n--feature-gates=TTLAfterFinished=true \\\n--kubeconfig=/etc/kubernetes/kubeconfig/kubelet.yaml \\\n--node-labels=\"node.kubernetes.io/worker,node-role.kubernetes.io/worker,kubernetes.io/role=worker,role=worker,ip=${DEFAULT_IPV4},k1=v1,k2=v2\" \\\n--v=2\"\nExecStop=-/usr/bin/docker stop -t 10 $NAME\nExecStopPost=-/usr/bin/docker rm -f $NAME\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "k8s-kubelet.service"
      },
      {
        "enabled": false,
        "mask": true,
        "name": "etcd2.service"
      },
      {
        "enabled": false,
        "mask": true,
        "name": "update-engine.service"
      },
      {
        "enabled": false,
        "mask": true,
        "name": "locksmithd.service"
      },
      {
        "enabled": false,
        "mask": true,
        "name": "fleet.service"
      },
      {
        "enabled": false,
        "mask": true,
        "name": "fleet.socket"
      },
      {
        "enabled": false,
        "mask": true,
        "name": "flanneld.service"
      },
      {
        "enabled": false,
        "mask": true,
        "name": "systemd-networkd-wait-online.service"
      }
    ]
  }
}
