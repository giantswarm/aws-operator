AWSTemplateFormatVersion: 2010-09-09
Description: Tenant Cluster Control Plane Cloud Formation Stack.
Outputs:
  DockerVolumeResourceName:
    Value: rsc-abbacd01
  MasterImageID:
    Value: ami-0eb0d9bb7ad1bd1e9
  MasterInstanceResourceName:
    Value: rsc-ac0dc01
  MasterInstanceType:
    Value: m5.xlarge
  VPCID:
    Value: !Ref VPC
  VPCPeeringConnectionID:
    Value: !Ref VPCPeeringConnection
  WorkerASGName:
    Value: !Ref workerAutoScalingGroup
  WorkerDockerVolumeSizeGB:
    Value: 100
  WorkerImageID:
    Value: ami-0eb0d9bb7ad1bd1e9
  WorkerInstanceType:
    Value: m5.2xlarge
  VersionBundleVersion:
    Value:
      Ref: VersionBundleVersionParameter
Parameters:
  VersionBundleVersionParameter:
    Type: String
    Description: Sets the VersionBundleVersion used to generate the template.
Resources:
  workerAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnetEuCentral1a
        - !Ref PrivateSubnetEuCentral1b
        - !Ref PrivateSubnetEuCentral1c
      AvailabilityZones:
        - eu-central-1a
        - eu-central-1b
        - eu-central-1c
      DesiredCapacity: 3
      MinSize: 3
      MaxSize: 5
      LaunchConfigurationName: !Ref workerLaunchConfiguration
      LoadBalancerNames:
        - !Ref IngressLoadBalancer
      HealthCheckGracePeriod: 10
      MetricsCollection:
        - Granularity: "1Minute"
      Tags:
        - Key: Name
          Value: 8y5ck-worker
          PropagateAtLaunch: true
        - Key: giantswarm.io/tccp
          Value: true
          PropagateAtLaunch: true
        - Key: k8s.io/cluster-autoscaler/enabled
          Value: true
          PropagateAtLaunch: false
        - Key: k8s.io/cluster-autoscaler/8y5ck
          Value: true
          PropagateAtLaunch: false
    UpdatePolicy:
      AutoScalingRollingUpdate:
        # minimum amount of instances that must always be running during a rolling update
        MinInstancesInService: 2
        # only do a rolling update of this amount of instances max
        MaxBatchSize: 1
        # after creating a new instance, pause operations on the ASG for this amount of time
        PauseTime: PT15M
  MasterRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: 8y5ck-master-EC2-K8S-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: ec2.amazonaws.com
          Action: "sts:AssumeRole"
  MasterRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: 8y5ck-master-EC2-K8S-Policy
      Roles:
        - Ref: "MasterRole"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "ec2:*"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "s3:GetBucketLocation"
              - "s3:ListAllMyBuckets"
            Resource: "*"
          - Effect: "Allow"
            Action: "s3:ListBucket"
            Resource: "arn:aws:s3:::tenant-account-g8s-8y5ck"
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: "arn:aws:s3:::tenant-account-g8s-8y5ck/*"
          - Effect: "Allow"
            Action: "elasticloadbalancing:*"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "autoscaling:DescribeAutoScalingGroups"
              - "autoscaling:DescribeAutoScalingInstances"
              - "autoscaling:DescribeTags"
              - "autoscaling:DescribeLaunchConfigurations"
              - "ec2:DescribeLaunchTemplateVersions"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "autoscaling:SetDesiredCapacity"
              - "autoscaling:TerminateInstanceInAutoScalingGroup"
            Resource: "*"
            Condition:
              StringEquals:
                autoscaling:ResourceTag/giantswarm.io/cluster: "8y5ck"
  MasterInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: 8y5ck-master-EC2-K8S-Role
      Roles:
        - Ref: "MasterRole"
  WorkerRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: 8y5ck-worker-EC2-K8S-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: ec2.amazonaws.com
          Action: "sts:AssumeRole"
  WorkerRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: 8y5ck-worker-EC2-K8S-Policy
      Roles:
        - Ref: "WorkerRole"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "ec2:Describe*"
            Resource: "*"
          - Effect: "Allow"
            Action: "ec2:AttachVolume"
            Resource: "*"
          - Effect: "Allow"
            Action: "ec2:DetachVolume"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "s3:GetBucketLocation"
              - "s3:ListAllMyBuckets"
            Resource: "*"
          - Effect: "Allow"
            Action: "s3:ListBucket"
            Resource: "arn:aws:s3:::tenant-account-g8s-8y5ck"
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: "arn:aws:s3:::tenant-account-g8s-8y5ck/*"
          - Effect: "Allow"
            Action:
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:GetRepositoryPolicy"
              - "ecr:DescribeRepositories"
              - "ecr:ListImages"
              - "ecr:BatchGetImage"
            Resource: "*"
  WorkerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: 8y5ck-worker-EC2-K8S-Role
      Roles:
        - Ref: "WorkerRole"
  rsc-ac0dc01:
    Type: "AWS::EC2::Instance"
    Description: Master instance
    DependsOn:
    - rsc-abbacd01
    - EtcdVolume
    Properties:
      AvailabilityZone: eu-central-1b
      DisableApiTermination: true
      IamInstanceProfile: !Ref MasterInstanceProfile
      ImageId: ami-0eb0d9bb7ad1bd1e9
      InstanceType: m5.xlarge
      Monitoring: false
      SecurityGroupIds:
      - !Ref MasterSecurityGroup
      SubnetId: !Ref PrivateSubnetEuCentral1b
      UserData: ewogICJpZ25pdGlvbiI6IHsKICAgICJ2ZXJzaW9uIjogIjIuMi4wIiwKICAgICJjb25maWciOiB7CiAgICAgICJhcHBlbmQiOiBbCiAgICAgICAgewogICAgICAgICAgInNvdXJjZSI6ICJzMzovL3RlbmFudC1hY2NvdW50LWc4cy04eTVjay92ZXJzaW9uLzcuMy4wL2Nsb3VkY29uZmlnL3ZfNF81XzAvbWFzdGVyIgogICAgICAgIH0KICAgICAgXQogICAgfQogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiZmlsZXN5c3RlbXMiOiBbCiAgICAgIHsgCiAgICAgICAgIm5hbWUiOiAiZG9ja2VyIiwKICAgICAgICAibW91bnQiOiB7CiAgICAgICAgICAiZGV2aWNlIjogIi9kZXYveHZkYyIsCiAgICAgICAgICAid2lwZUZpbGVzeXN0ZW0iOiB0cnVlLAogICAgICAgICAgImxhYmVsIjogImRvY2tlciIsCiAgICAgICAgICAiZm9ybWF0IjogInhmcyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHsKICAgICAgICAibmFtZSI6ICJsb2ciLAogICAgICAgICJtb3VudCI6IHsKICAgICAgICAgICJkZXZpY2UiOiAiL2Rldi94dmRmIiwKICAgICAgICAgICJ3aXBlRmlsZXN5c3RlbSI6IHRydWUsCiAgICAgICAgICAibGFiZWwiOiAibG9nIiwKICAgICAgICAgICJmb3JtYXQiOiAieGZzIgogICAgICAgIH0KICAgICAgfSwKICAgICAgewogICAgICAgICJuYW1lIjogImV0Y2QiLAogICAgICAgICJtb3VudCI6IHsKICAgICAgICAgICJkZXZpY2UiOiAiL2Rldi94dmRoIiwKICAgICAgICAgICJ3aXBlRmlsZXN5c3RlbSI6IGZhbHNlLAogICAgICAgICAgImxhYmVsIjogImV0Y2QiLAogICAgICAgICAgImZvcm1hdCI6ICJleHQ0IgogICAgICAgIH0KICAgICAgfQogICAgXQogIH0KfQo=
      Tags:
      - Key: Name
        Value: 8y5ck-master
      - Key: giantswarm.io/tccp
        Value: true
  rsc-abbacd01:
    Type: AWS::EC2::Volume
    Properties:

      Encrypted: true

      Size: 50
      VolumeType: gp2
      AvailabilityZone: eu-central-1b
      Tags:
      - Key: Name
        Value: 8y5ck-docker
      - Key: giantswarm.io/tccp
        Value: true
  EtcdVolume:
    Type: AWS::EC2::Volume
    Properties:

      Encrypted: true

      Size: 100
      VolumeType: gp2
      AvailabilityZone: eu-central-1b
      Tags:
      - Key: Name
        Value: 8y5ck-etcd
      - Key: giantswarm.io/tccp
        Value: true
  LogVolume:
    Type: AWS::EC2::Volume
    Properties:

      Encrypted: true

      Size: 100
      VolumeType: gp2
      AvailabilityZone: eu-central-1b
      Tags:
      - Key: Name
        Value: 8y5ck-log
      - Key: giantswarm.io/tccp
        Value: true
  rsc-ac0dc01DockerMountPoint:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref rsc-ac0dc01
      VolumeId: !Ref rsc-abbacd01
      Device: /dev/xvdc
  rsc-ac0dc01EtcdMountPoint:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref rsc-ac0dc01
      VolumeId: !Ref EtcdVolume
      Device: /dev/xvdh
  rsc-ac0dc01LogMountPoint:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref rsc-ac0dc01
      VolumeId: !Ref LogVolume
      Device: /dev/xvdf
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 8y5ck
        - Key: giantswarm.io/tccp
          Value: true
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - PublicRouteTableEuCentral1b
      - PrivateRouteTableEuCentral1a
      - PrivateRouteTableEuCentral1c
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId: !Ref VPC
  InternetGatewayRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1b
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  workerLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Description: worker launch configuration
    Properties:
      ImageId: ami-0eb0d9bb7ad1bd1e9
      SecurityGroups:
      - !Ref WorkerSecurityGroup
      InstanceType: m5.2xlarge
      InstanceMonitoring: false
      IamInstanceProfile: !Ref WorkerInstanceProfile
      BlockDeviceMappings:
      
      - DeviceName: "/dev/xvdh"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 100
          VolumeType: gp2
      
      - DeviceName: "/dev/xvdf"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 100
          VolumeType: gp2
      
      - DeviceName: "/dev/xvdg"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 100
          VolumeType: gp2
      
      AssociatePublicIpAddress: false
      UserData: ewogICJpZ25pdGlvbiI6IHsKICAgICJ2ZXJzaW9uIjogIjIuMi4wIiwKICAgICJjb25maWciOiB7CiAgICAgICJhcHBlbmQiOiBbCiAgICAgICAgewogICAgICAgICAgInNvdXJjZSI6ICJzMzovL3RlbmFudC1hY2NvdW50LWc4cy04eTVjay92ZXJzaW9uLzcuMy4wL2Nsb3VkY29uZmlnL3ZfNF81XzAvd29ya2VyIgogICAgICAgIH0KICAgICAgXQogICAgfQogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiZmlsZXN5c3RlbXMiOiBbCiAgICAgIHsgCiAgICAgICAgIm5hbWUiOiAiZG9ja2VyIiwKICAgICAgICAibW91bnQiOiB7CiAgICAgICAgICAiZGV2aWNlIjogIi9kZXYveHZkaCIsCiAgICAgICAgICAid2lwZUZpbGVzeXN0ZW0iOiB0cnVlLAogICAgICAgICAgImxhYmVsIjogImRvY2tlciIsCiAgICAgICAgICAiZm9ybWF0IjogInhmcyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHsKICAgICAgICAibmFtZSI6ICJsb2ciLAogICAgICAgICJtb3VudCI6IHsKICAgICAgICAgICJkZXZpY2UiOiAiL2Rldi94dmRmIiwKICAgICAgICAgICJ3aXBlRmlsZXN5c3RlbSI6IHRydWUsCiAgICAgICAgICAibGFiZWwiOiAibG9nIiwKICAgICAgICAgICJmb3JtYXQiOiAieGZzIgogICAgICAgIH0KICAgICAgfSwKICAgICAgewogICAgICAgICJuYW1lIjogImt1YmVsZXQiLAogICAgICAgICJtb3VudCI6IHsKICAgICAgICAgICJkZXZpY2UiOiAiL2Rldi94dmRnIiwKICAgICAgICAgICJ3aXBlRmlsZXN5c3RlbSI6IHRydWUsCiAgICAgICAgICAibGFiZWwiOiAia3ViZWxldCIsCiAgICAgICAgICAiZm9ybWF0IjogInhmcyIKICAgICAgICB9CiAgICAgIH0KICAgIF0KICB9Cn0K
  NodeDrainerLifecycleHook:
    Type: "AWS::AutoScaling::LifecycleHook"
    Properties:
      AutoScalingGroupName:
        Ref: workerAutoScalingGroup
      DefaultResult: CONTINUE
      HeartbeatTimeout: 3600
      LifecycleHookName: NodeDrainer
      LifecycleTransition: "autoscaling:EC2_INSTANCE_TERMINATING"
  
  ApiLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      ConnectionSettings:
        IdleTimeout: 1200
      HealthCheck:
        HealthyThreshold: 2
        Interval: 5
        Target: TCP:443
        Timeout: 3
        UnhealthyThreshold: 2
      Instances:
      - !Ref rsc-ac0dc01
      Listeners:
      
      - InstancePort: 443
        InstanceProtocol: TCP
        LoadBalancerPort: 443
        Protocol: TCP
      
      LoadBalancerName: 8y5ck-api
      Scheme: internet-facing
      SecurityGroups:
        - !Ref MasterSecurityGroup
      Subnets:
        - !Ref PublicSubnetEuCentral1a
      
        - !Ref PublicSubnetEuCentral1b
      
        - !Ref PublicSubnetEuCentral1c
      

  EtcdLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionSettings:
        IdleTimeout: 1200
      HealthCheck:
        HealthyThreshold: 2
        Interval: 5
        Target: TCP:2379
        Timeout: 3
        UnhealthyThreshold: 2
      Instances:
      - !Ref rsc-ac0dc01
      Listeners:
      
      - InstancePort: 2379
        InstanceProtocol: TCP
        LoadBalancerPort: 2379
        Protocol: TCP
      
      LoadBalancerName: 8y5ck-etcd
      Scheme: internal
      SecurityGroups:
        - !Ref EtcdELBSecurityGroup
      Subnets:
        - !Ref PrivateSubnetEuCentral1a
      
        - !Ref PrivateSubnetEuCentral1b
      
        - !Ref PrivateSubnetEuCentral1c
      

  IngressLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      ConnectionSettings:
        IdleTimeout: 60
      HealthCheck:
        HealthyThreshold: 2
        Interval: 5
        Target: TCP:30011
        Timeout: 3
        UnhealthyThreshold: 2
      Listeners:
      
      - InstancePort: 30011
        InstanceProtocol: TCP
        LoadBalancerPort: 443
        Protocol: TCP
      
      - InstancePort: 30010
        InstanceProtocol: TCP
        LoadBalancerPort: 80
        Protocol: TCP
      
      LoadBalancerName: 8y5ck-ingress
      Policies:
      - PolicyName: "EnableProxyProtocol"
        PolicyType: "ProxyProtocolPolicyType"
        Attributes:
        - Name: "ProxyProtocol"
          Value: "true"
        InstancePorts:
        
        - 30011
        
        - 30010
        
      Scheme: internet-facing
      SecurityGroups:
        - !Ref IngressSecurityGroup
      Subnets:
        - !Ref PublicSubnetEuCentral1a
      
        - !Ref PublicSubnetEuCentral1b
      
        - !Ref PublicSubnetEuCentral1c
      
  
  NATGatewayEuCentral1a:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATEIPEuCentral1a
        - AllocationId
      SubnetId: !Ref PublicSubnetEuCentral1a
      Tags:
        - Key: Name
          Value: 8y5ck
        - Key: giantswarm.io/availability-zone
          Value: eu-central-1a
        - Key: giantswarm.io/tccp
          Value: true
  NATEIPEuCentral1a:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATRouteEuCentral1a:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1a
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayEuCentral1a
  NATGatewayEuCentral1b:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATEIPEuCentral1b
        - AllocationId
      SubnetId: !Ref PublicSubnetEuCentral1b
      Tags:
        - Key: Name
          Value: 8y5ck
        - Key: giantswarm.io/availability-zone
          Value: eu-central-1b
        - Key: giantswarm.io/tccp
          Value: true
  NATEIPEuCentral1b:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATRouteEuCentral1b:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1b
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayEuCentral1b
  NATGatewayEuCentral1c:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATEIPEuCentral1c
        - AllocationId
      SubnetId: !Ref PublicSubnetEuCentral1c
      Tags:
        - Key: Name
          Value: 8y5ck
        - Key: giantswarm.io/availability-zone
          Value: eu-central-1c
        - Key: giantswarm.io/tccp
          Value: true
  NATEIPEuCentral1c:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATRouteEuCentral1c:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1c
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayEuCentral1c
  
  
  PublicRouteTableEuCentral1a:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 8y5ck-public-eu-central-1a
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1a
      - Key: giantswarm.io/route-table-type
        Value: public
      - Key: giantswarm.io/tccp
        Value: true
  PublicRouteTableEuCentral1b:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 8y5ck-public-eu-central-1b
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1b
      - Key: giantswarm.io/route-table-type
        Value: public
      - Key: giantswarm.io/tccp
        Value: true
  PublicRouteTableEuCentral1c:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 8y5ck-public-eu-central-1c
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1c
      - Key: giantswarm.io/route-table-type
        Value: public
      - Key: giantswarm.io/tccp
        Value: true
  PrivateRouteTableEuCentral1a:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 8y5ck-private-eu-central-1a
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1a
      - Key: giantswarm.io/route-table-type
        Value: private
      - Key: giantswarm.io/tccp
        Value: true
  VPCPeeringRouteEuCentral1a:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1a
      DestinationCidrBlock: 10.1.0.0/16
      VpcPeeringConnectionId:
        Ref: VPCPeeringConnection
  PrivateRouteTableEuCentral1b:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 8y5ck-private-eu-central-1b
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1b
      - Key: giantswarm.io/route-table-type
        Value: private
      - Key: giantswarm.io/tccp
        Value: true
  VPCPeeringRouteEuCentral1b:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1b
      DestinationCidrBlock: 10.1.0.0/16
      VpcPeeringConnectionId:
        Ref: VPCPeeringConnection
  PrivateRouteTableEuCentral1c:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 8y5ck-private-eu-central-1c
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1c
      - Key: giantswarm.io/route-table-type
        Value: private
      - Key: giantswarm.io/tccp
        Value: true
  VPCPeeringRouteEuCentral1c:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1c
      DestinationCidrBlock: 10.1.0.0/16
      VpcPeeringConnectionId:
        Ref: VPCPeeringConnection
  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 8y5ck-master
      VpcId: !Ref VPC
      SecurityGroupIngress:
      
      -
        Description: Allow all traffic to the master instance.
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      -
        Description: Allow traffic from control plane CIDR to 4194 for cadvisor scraping.
        IpProtocol: tcp
        FromPort: 4194
        ToPort: 4194
        CidrIp: 10.1.0.0/16
      -
        Description: Allow traffic from control plane CIDR to 2379 for etcd backup.
        IpProtocol: tcp
        FromPort: 2379
        ToPort: 2379
        CidrIp: 10.1.0.0/16
      -
        Description: Allow traffic from control plane CIDR to 10250 for kubelet scraping.
        IpProtocol: tcp
        FromPort: 10250
        ToPort: 10250
        CidrIp: 10.1.0.0/16
      -
        Description: Allow traffic from control plane CIDR to 10300 for node-exporter scraping.
        IpProtocol: tcp
        FromPort: 10300
        ToPort: 10300
        CidrIp: 10.1.0.0/16
      -
        Description: Allow traffic from control plane CIDR to 10301 for kube-state-metrics scraping.
        IpProtocol: tcp
        FromPort: 10301
        ToPort: 10301
        CidrIp: 10.1.0.0/16
      -
        Description: Only allow ssh traffic from the control plane.
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.1.0.0/16
      Tags:
        - Key: Name
          Value:  8y5ck-master
        - Key: giantswarm.io/tccp
          Value: true
  WorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 8y5ck-worker
      VpcId: !Ref VPC
      SecurityGroupIngress:
      -
        IpProtocol: tcp
        FromPort: 30011
        ToPort: 30011
        
        SourceSecurityGroupId: !Ref IngressSecurityGroup
        
      -
        IpProtocol: tcp
        FromPort: 30010
        ToPort: 30010
        
        SourceSecurityGroupId: !Ref IngressSecurityGroup
        
      -
        IpProtocol: tcp
        FromPort: 30011
        ToPort: 30011
        
        CidrIp: 10.1.0.0/16
        
      -
        IpProtocol: tcp
        FromPort: 4194
        ToPort: 4194
        
        CidrIp: 10.1.0.0/16
        
      -
        IpProtocol: tcp
        FromPort: 10250
        ToPort: 10250
        
        CidrIp: 10.1.0.0/16
        
      -
        IpProtocol: tcp
        FromPort: 10300
        ToPort: 10300
        
        CidrIp: 10.1.0.0/16
        
      -
        IpProtocol: tcp
        FromPort: 10301
        ToPort: 10301
        
        CidrIp: 10.1.0.0/16
        
      -
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        
        CidrIp: 10.1.0.0/16
        
      Tags:
        - Key: Name
          Value:  8y5ck-worker
        - Key: giantswarm.io/tccp
          Value: true
  IngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 8y5ck-ingress
      VpcId: !Ref VPC
      SecurityGroupIngress:
      
      -
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      
      -
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      
      Tags:
        - Key: Name
          Value: 8y5ck-ingress
        - Key: giantswarm.io/tccp
          Value: true
  EtcdELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 8y5ck-etcd-elb
      VpcId: !Ref VPC
      SecurityGroupIngress:
      
      -
        IpProtocol: tcp
        FromPort: 2379
        ToPort: 2379
        CidrIp: 0.0.0.0/0
      
      -
        IpProtocol: tcp
        FromPort: 2379
        ToPort: 2379
        CidrIp: 10.1.0.0/16
      
      Tags:
        - Key: Name
          Value: 8y5ck-etcd-elb
        - Key: giantswarm.io/tccp
          Value: true
  # Allow all access between masters and workers for calico. This is done after
  # the other rules to avoid circular dependencies.
  MasterAllowCalicoIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterSecurityGroup
    Properties:
      # Allow access between masters and workers for calico.
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref MasterSecurityGroup
  MasterAllowWorkerCalicoIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterSecurityGroup
    Properties:
      # Allow access between masters and workers for calico.
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref WorkerSecurityGroup
  MasterAllowEtcdIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterSecurityGroup
    Properties:
      # Allow access between masters and workers for calico.
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: "tcp"
      FromPort: 2379
      ToPort: 2379
      SourceSecurityGroupId: !Ref EtcdELBSecurityGroup
  WorkerAllowCalicoIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: WorkerSecurityGroup
    Properties:
      # Allow access between masters and workers for calico.
      GroupId: !Ref WorkerSecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref WorkerSecurityGroup
  WorkerAllowMasterCalicoIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: WorkerSecurityGroup
    Properties:
      # Allow access between masters and workers for calico.
      GroupId: !Ref WorkerSecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref MasterSecurityGroup
  VPCDefaultSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt VPC.DefaultSecurityGroup
      Description: "Allow outbound traffic from loopback address."
      IpProtocol: -1
      CidrIp: 127.0.0.1/32
  
  PublicSubnetEuCentral1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1a
      CidrBlock: 10.100.3.32/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PublicSubnetEuCentral1a
      - Key: giantswarm.io/subnet-type
        Value: public
      - Key: giantswarm.io/tccp
        Value: true
      - Key: "kubernetes.io/role/elb"
        Value: "1"
      VpcId: !Ref VPC
  PublicSubnetRouteTableAssociationEuCentral1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1a
      SubnetId: !Ref PublicSubnetEuCentral1a
  PublicSubnetEuCentral1b:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1b
      CidrBlock: 10.100.3.96/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PublicSubnetEuCentral1b
      - Key: giantswarm.io/subnet-type
        Value: public
      - Key: giantswarm.io/tccp
        Value: true
      - Key: "kubernetes.io/role/elb"
        Value: "1"
      VpcId: !Ref VPC
  PublicSubnetRouteTableAssociationEuCentral1b:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1b
      SubnetId: !Ref PublicSubnetEuCentral1b
  PublicSubnetEuCentral1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1c
      CidrBlock: 10.100.3.160/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PublicSubnetEuCentral1c
      - Key: giantswarm.io/subnet-type
        Value: public
      - Key: giantswarm.io/tccp
        Value: true
      - Key: "kubernetes.io/role/elb"
        Value: "1"
      VpcId: !Ref VPC
  PublicSubnetRouteTableAssociationEuCentral1c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1c
      SubnetId: !Ref PublicSubnetEuCentral1c
  PrivateSubnetEuCentral1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1a
      CidrBlock: 10.100.3.0/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PrivateSubnetEuCentral1a
      - Key: giantswarm.io/subnet-type
        Value: private
      - Key: giantswarm.io/tccp
        Value: true
      - Key: "kubernetes.io/role/internal-elb"
        Value: "1"
      VpcId: !Ref VPC
  PrivateSubnetRouteTableAssociationEuCentral1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1a
      SubnetId: !Ref PrivateSubnetEuCentral1a
  PrivateSubnetEuCentral1b:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1b
      CidrBlock: 10.100.3.64/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PrivateSubnetEuCentral1b
      - Key: giantswarm.io/subnet-type
        Value: private
      - Key: giantswarm.io/tccp
        Value: true
      - Key: "kubernetes.io/role/internal-elb"
        Value: "1"
      VpcId: !Ref VPC
  PrivateSubnetRouteTableAssociationEuCentral1b:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1b
      SubnetId: !Ref PrivateSubnetEuCentral1b
  PrivateSubnetEuCentral1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1c
      CidrBlock: 10.100.3.128/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PrivateSubnetEuCentral1c
      - Key: giantswarm.io/subnet-type
        Value: private
      - Key: giantswarm.io/tccp
        Value: true
      - Key: "kubernetes.io/role/internal-elb"
        Value: "1"
      VpcId: !Ref VPC
  PrivateSubnetRouteTableAssociationEuCentral1c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1c
      SubnetId: !Ref PrivateSubnetEuCentral1c
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: 8y5ck
      - Key: Installation
        Value: 
      - Key: giantswarm.io/tccp
        Value: true
  VPCPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Properties:
      VpcId: !Ref VPC
      PeerVpcId: vpc-f8d0e10b
      PeerOwnerId: 'control-plane-account'
      PeerRoleArn: imaginary-cp-peer-role-arn
      Tags:
        - Key: Name
          Value: 8y5ck
        - Key: giantswarm.io/tccp
          Value: true
  VPCS3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPC
      RouteTableIds:
        - !Ref PublicRouteTableEuCentral1b
        - !Ref PrivateRouteTableEuCentral1a
        - !Ref PrivateRouteTableEuCentral1b
        - !Ref PrivateRouteTableEuCentral1c
      ServiceName: 'com.amazonaws.eu-central-1.s3'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "8y5ck-vpc-s3-endpoint-policy-bucket"
            Principal : "*"
            Effect: "Allow"
            Action: "s3:*"
            Resource: "arn:aws:s3:::*"
          - Sid: "8y5ck-vpc-s3-endpoint-policy-object"
            Principal : "*"
            Effect: "Allow"
            Action: "s3:*"
            Resource: "arn:aws:s3:::*/*"