AWSTemplateFormatVersion: 2010-09-09
Description: Tenant Cluster Control Plane Cloud Formation Stack.
Outputs:
  OperatorVersion:
    Value: 7.3.0
  VPCID:
    Value: !Ref VPC
  VPCPeeringConnectionID:
    Value: !Ref VPCPeeringConnection
Resources:
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: 8y5ck
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - PublicRouteTableEuCentral1a
      - PublicRouteTableEuCentral1b
      - PublicRouteTableEuCentral1c
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId: !Ref VPC
  PublicInternetGatewayRouteEuCentral1a:
    Type: AWS::EC2::Route
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1a
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicInternetGatewayRouteEuCentral1b:
    Type: AWS::EC2::Route
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1b
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicInternetGatewayRouteEuCentral1c:
    Type: AWS::EC2::Route
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1c
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  
  ApiInternalLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      ConnectionSettings:
        IdleTimeout: 1200
      HealthCheck:
        HealthyThreshold: 2
        Interval: 5
        Target: HTTP:8089/healthz
        Timeout: 3
        UnhealthyThreshold: 2
      Listeners:
      
      - InstancePort: 443
        InstanceProtocol: TCP
        LoadBalancerPort: 443
        Protocol: TCP
      
      LoadBalancerName: 8y5ck-api-internal
      Scheme: internal
      SecurityGroups:
        - !Ref APIInternalELBSecurityGroup
      Subnets:
        - !Ref PrivateSubnetEuCentral1a
        - !Ref PrivateSubnetEuCentral1b
        - !Ref PrivateSubnetEuCentral1c
  ApiLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      ConnectionSettings:
        IdleTimeout: 1200
      HealthCheck:
        HealthyThreshold: 2
        Interval: 5
        Target: HTTP:8089/healthz
        Timeout: 3
        UnhealthyThreshold: 2
      Listeners:
      
      - InstancePort: 443
        InstanceProtocol: TCP
        LoadBalancerPort: 443
        Protocol: TCP
      
      LoadBalancerName: 8y5ck-api
      Scheme: internet-facing
      SecurityGroups:
        - !Ref MasterSecurityGroup
      Subnets:
        - !Ref PublicSubnetEuCentral1a
        - !Ref PublicSubnetEuCentral1b
        - !Ref PublicSubnetEuCentral1c

  EtcdLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionSettings:
        IdleTimeout: 1200
      HealthCheck:
        HealthyThreshold: 2
        Interval: 5
        Target: TCP:2379
        Timeout: 3
        UnhealthyThreshold: 2
      Listeners:
      
      - InstancePort: 2379
        InstanceProtocol: TCP
        LoadBalancerPort: 2379
        Protocol: TCP
      
      LoadBalancerName: 8y5ck-etcd
      Scheme: internal
      SecurityGroups:
        - !Ref EtcdELBSecurityGroup
      Subnets:
        - !Ref PrivateSubnetEuCentral1a
        - !Ref PrivateSubnetEuCentral1b
        - !Ref PrivateSubnetEuCentral1c
  
  NATGatewayEuCentral1a:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATEIPEuCentral1a
        - AllocationId
      SubnetId: !Ref PublicSubnetEuCentral1a
      Tags:
        - Key: Name
          Value: 8y5ck
        - Key: giantswarm.io/availability-zone
          Value: eu-central-1a
  NATEIPEuCentral1a:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGatewayEuCentral1b:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATEIPEuCentral1b
        - AllocationId
      SubnetId: !Ref PublicSubnetEuCentral1b
      Tags:
        - Key: Name
          Value: 8y5ck
        - Key: giantswarm.io/availability-zone
          Value: eu-central-1b
  NATEIPEuCentral1b:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGatewayEuCentral1c:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATEIPEuCentral1c
        - AllocationId
      SubnetId: !Ref PublicSubnetEuCentral1c
      Tags:
        - Key: Name
          Value: 8y5ck
        - Key: giantswarm.io/availability-zone
          Value: eu-central-1c
  NATEIPEuCentral1c:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATRouteEuCentral1a:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1a
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayEuCentral1a
  AWSCNINATRouteEuCentral1a:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AWSCNIRouteTableEuCentral1a
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayEuCentral1a
  NATRouteEuCentral1b:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1b
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayEuCentral1b
  AWSCNINATRouteEuCentral1b:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AWSCNIRouteTableEuCentral1b
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayEuCentral1b
  NATRouteEuCentral1c:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1c
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayEuCentral1c
  AWSCNINATRouteEuCentral1c:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AWSCNIRouteTableEuCentral1c
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayEuCentral1c
  
  
  AWSCNIRouteTableEuCentral1a:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 8y5ck-aws-cni-1a
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1a
      - Key: giantswarm.io/route-table-type
        Value: aws-cni
  AWSCNIRouteTableEuCentral1b:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 8y5ck-aws-cni-1b
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1b
      - Key: giantswarm.io/route-table-type
        Value: aws-cni
  AWSCNIRouteTableEuCentral1c:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 8y5ck-aws-cni-1c
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1c
      - Key: giantswarm.io/route-table-type
        Value: aws-cni
  PublicRouteTableEuCentral1a:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 8y5ck-public-1a
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1a
      - Key: giantswarm.io/route-table-type
        Value: public
  PublicRouteTableEuCentral1b:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 8y5ck-public-1b
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1b
      - Key: giantswarm.io/route-table-type
        Value: public
  PublicRouteTableEuCentral1c:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 8y5ck-public-1c
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1c
      - Key: giantswarm.io/route-table-type
        Value: public
  PrivateRouteTableEuCentral1a:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 8y5ck-private-1a
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1a
      - Key: giantswarm.io/route-table-type
        Value: private
  VPCPeeringRouteEuCentral1a:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1a
      DestinationCidrBlock: 10.1.0.0/16
      VpcPeeringConnectionId:
        Ref: VPCPeeringConnection
  PrivateRouteTableEuCentral1b:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 8y5ck-private-1b
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1b
      - Key: giantswarm.io/route-table-type
        Value: private
  VPCPeeringRouteEuCentral1b:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1b
      DestinationCidrBlock: 10.1.0.0/16
      VpcPeeringConnectionId:
        Ref: VPCPeeringConnection
  PrivateRouteTableEuCentral1c:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 8y5ck-private-1c
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1c
      - Key: giantswarm.io/route-table-type
        Value: private
  VPCPeeringRouteEuCentral1c:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1c
      DestinationCidrBlock: 10.1.0.0/16
      VpcPeeringConnectionId:
        Ref: VPCPeeringConnection
  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 8y5ck-master
      VpcId: !Ref VPC
      SecurityGroupIngress:
      #
      # Public API Whitelist Disabled Rules
      #
      -
        Description: "Allow all traffic to the master instance."
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

      -
        Description: "Allow traffic from Control Plane CIDR to 4194 for cadvisor scraping."
        IpProtocol: tcp
        FromPort: 4194
        ToPort: 4194
        CidrIp: 10.1.0.0/16
      -
        Description: "Allow traffic from Control Plane CIDR to 2379 for etcd backup."
        IpProtocol: tcp
        FromPort: 2379
        ToPort: 2379
        CidrIp: 10.1.0.0/16
      -
        Description: "Allow traffic from Control Plane CIDR to 10250 for kubelet scraping."
        IpProtocol: tcp
        FromPort: 10250
        ToPort: 10250
        CidrIp: 10.1.0.0/16
      -
        Description: "Allow traffic from Control Plane CIDR to 10300 for node-exporter scraping."
        IpProtocol: tcp
        FromPort: 10300
        ToPort: 10300
        CidrIp: 10.1.0.0/16
      -
        Description: "Allow traffic from Control Plane CIDR to 10301 for kube-state-metrics scraping."
        IpProtocol: tcp
        FromPort: 10301
        ToPort: 10301
        CidrIp: 10.1.0.0/16
      -
        Description: "Only allow SSH traffic from the Control Plane."
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.1.0.0/16

      Tags:
        - Key: Name
          Value: 8y5ck-master
  EtcdELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 8y5ck-etcd-elb
      VpcId: !Ref VPC
      SecurityGroupIngress:
      -
        Description: "Allow all Etcd traffic from the VPC to the Etcd load balancer."
        IpProtocol: tcp
        FromPort: 2379
        ToPort: 2379
        CidrIp: 0.0.0.0/0
      -
        Description: "Allow traffic from Control Plane to Etcd port for backup and metrics."
        IpProtocol: tcp
        FromPort: 2379
        ToPort: 2379
        CidrIp: 10.1.0.0/16
      Tags:
        - Key: Name
          Value: 8y5ck-etcd-elb
  APIInternalELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 8y5ck-internal-api
      VpcId: !Ref VPC
      SecurityGroupIngress:
      #
      # Private API Whitelist Disabled Rules
      #
      -
        Description: "Allow all traffic to the master instance from A class network."
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: "10.0.0.0/8"
      -
        Description: "Allow all traffic to the master instance from B class network."
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: "172.16.0.0/12"
      -
        Description: "Allow all traffic to the master instance from C class network."
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: "192.168.0.0/16"

      Tags:
        - Key: Name
          Value: 8y5ck-internal-api
  AWSCNISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "AWS CNI Security Group configured to the ENIConfig CRD."
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 8y5ck-aws-cni
  PodsIngressRuleFromMAsters:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: AWSCNISecurityGroup
    Properties:
      Description: Allow traffic from masters to pods.
      GroupId: !Ref AWSCNISecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref MasterSecurityGroup
  PodsAllowPodsCNIIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: AWSCNISecurityGroup
    Properties:
      Description: Allow traffic from pod to pod.
      GroupId: !Ref AWSCNISecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref AWSCNISecurityGroup
  MasterAllowCalicoIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterSecurityGroup
    Properties:
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref MasterSecurityGroup
  MasterAllowAPIInternalELBHealthCheck:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - MasterSecurityGroup
      - APIInternalELBSecurityGroup
    Properties:
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: "tcp"
      FromPort: 8089
      ToPort: 8089
      SourceSecurityGroupId: !Ref APIInternalELBSecurityGroup
  MasterAllowPodsCNIIngressRule:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: MasterSecurityGroup
      Properties:
        Description: Allow traffic from pod to master.
        GroupId: !Ref MasterSecurityGroup
        IpProtocol: -1
        FromPort: -1
        ToPort: -1
        SourceSecurityGroupId: !Ref AWSCNISecurityGroup
  MasterAllowEtcdIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterSecurityGroup
    Properties:
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: "tcp"
      FromPort: 2379
      ToPort: 2379
      SourceSecurityGroupId: !Ref EtcdELBSecurityGroup
  VPCDefaultSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outbound traffic from loopback address.
      GroupId: !GetAtt VPC.DefaultSecurityGroup
      IpProtocol: -1
      CidrIp: 127.0.0.1/32
  
  AWSCNISubnetEuCentral1a:
    Type: AWS::EC2::Subnet
    DependsOn:
    - VPCCIDRBlockAWSCNI
    Properties:
      AvailabilityZone: eu-central-1a
      CidrBlock: <nil>
      Tags:
      - Key: Name
        Value: AWSCNISubnetEuCentral1a
      - Key: giantswarm.io/subnet-type
        Value: aws-cni
      VpcId: !Ref VPC
  AWSCNISubnetRouteTableAssociationEuCentral1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AWSCNIRouteTableEuCentral1a
      SubnetId: !Ref AWSCNISubnetEuCentral1a
  AWSCNISubnetEuCentral1b:
    Type: AWS::EC2::Subnet
    DependsOn:
    - VPCCIDRBlockAWSCNI
    Properties:
      AvailabilityZone: eu-central-1b
      CidrBlock: <nil>
      Tags:
      - Key: Name
        Value: AWSCNISubnetEuCentral1b
      - Key: giantswarm.io/subnet-type
        Value: aws-cni
      VpcId: !Ref VPC
  AWSCNISubnetRouteTableAssociationEuCentral1b:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AWSCNIRouteTableEuCentral1b
      SubnetId: !Ref AWSCNISubnetEuCentral1b
  AWSCNISubnetEuCentral1c:
    Type: AWS::EC2::Subnet
    DependsOn:
    - VPCCIDRBlockAWSCNI
    Properties:
      AvailabilityZone: eu-central-1c
      CidrBlock: <nil>
      Tags:
      - Key: Name
        Value: AWSCNISubnetEuCentral1c
      - Key: giantswarm.io/subnet-type
        Value: aws-cni
      VpcId: !Ref VPC
  AWSCNISubnetRouteTableAssociationEuCentral1c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AWSCNIRouteTableEuCentral1c
      SubnetId: !Ref AWSCNISubnetEuCentral1c
  PublicSubnetEuCentral1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1a
      CidrBlock: 10.100.3.32/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PublicSubnetEuCentral1a
      - Key: giantswarm.io/subnet-type
        Value: public
      - Key: kubernetes.io/role/elb
        Value: 1
      VpcId: !Ref VPC
  PublicSubnetRouteTableAssociationEuCentral1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1a
      SubnetId: !Ref PublicSubnetEuCentral1a
  PublicSubnetEuCentral1b:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1b
      CidrBlock: 10.100.3.96/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PublicSubnetEuCentral1b
      - Key: giantswarm.io/subnet-type
        Value: public
      - Key: kubernetes.io/role/elb
        Value: 1
      VpcId: !Ref VPC
  PublicSubnetRouteTableAssociationEuCentral1b:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1b
      SubnetId: !Ref PublicSubnetEuCentral1b
  PublicSubnetEuCentral1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1c
      CidrBlock: 10.100.3.160/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PublicSubnetEuCentral1c
      - Key: giantswarm.io/subnet-type
        Value: public
      - Key: kubernetes.io/role/elb
        Value: 1
      VpcId: !Ref VPC
  PublicSubnetRouteTableAssociationEuCentral1c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1c
      SubnetId: !Ref PublicSubnetEuCentral1c
  PrivateSubnetEuCentral1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1a
      CidrBlock: 10.100.3.0/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PrivateSubnetEuCentral1a
      - Key: giantswarm.io/subnet-type
        Value: private
      - Key: kubernetes.io/role/internal-elb
        Value: 1
      VpcId: !Ref VPC
  PrivateSubnetRouteTableAssociationEuCentral1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1a
      SubnetId: !Ref PrivateSubnetEuCentral1a
  PrivateSubnetEuCentral1b:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1b
      CidrBlock: 10.100.3.64/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PrivateSubnetEuCentral1b
      - Key: giantswarm.io/subnet-type
        Value: private
      - Key: kubernetes.io/role/internal-elb
        Value: 1
      VpcId: !Ref VPC
  PrivateSubnetRouteTableAssociationEuCentral1b:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1b
      SubnetId: !Ref PrivateSubnetEuCentral1b
  PrivateSubnetEuCentral1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1c
      CidrBlock: 10.100.3.128/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PrivateSubnetEuCentral1c
      - Key: giantswarm.io/subnet-type
        Value: private
      - Key: kubernetes.io/role/internal-elb
        Value: 1
      VpcId: !Ref VPC
  PrivateSubnetRouteTableAssociationEuCentral1c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1c
      SubnetId: !Ref PrivateSubnetEuCentral1c
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: 8y5ck
  VPCCIDRBlockAWSCNI:
    Type: AWS::EC2::VPCCidrBlock
    DependsOn:
      - VPC
      - VPCPeeringConnection
    Properties:
      CidrBlock: 172.17.0.1/16
      VpcId: !Ref VPC
  VPCPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Properties:
      VpcId: !Ref VPC
      PeerVpcId: vpc-testid
      # PeerOwnerId may be a number starting with 0. Cloud Formation is not able
      # to properly deal with that by its own so the configured value must be
      # quoted in order to ensure the peer owner id is properly handled as
      # string. Otherwise stack creation fails.
      PeerOwnerId: "control-plane-account"
      PeerRoleArn: peer-role-arn
  VPCS3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPC
      RouteTableIds:
        - !Ref PublicRouteTableEuCentral1a
        - !Ref PublicRouteTableEuCentral1b
        - !Ref PublicRouteTableEuCentral1c
        - !Ref PrivateRouteTableEuCentral1a
        - !Ref PrivateRouteTableEuCentral1b
        - !Ref PrivateRouteTableEuCentral1c
      ServiceName: com.amazonaws.eu-central-1.s3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "8y5ck-vpc-s3-endpoint-policy-bucket"
            Principal: "*"
            Effect: "Allow"
            Action: "s3:*"
            Resource: "arn:aws:s3:::*"
          - Sid: "8y5ck-vpc-s3-endpoint-policy-object"
            Principal : "*"
            Effect: "Allow"
            Action: "s3:*"
            Resource: "arn:aws:s3:::*/*"