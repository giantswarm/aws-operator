AWSTemplateFormatVersion: 2010-09-09
Description: Tenant Cluster Control Plane Cloud Formation Stack.
Outputs:
  DockerVolumeResourceName:
    Value: DockerVolume8Y5CK78968
  MasterImageID:
    Value: ami-038cea5071a5ee580
  MasterInstanceResourceName:
    Value: MasterInstance8Y5CK78968
  MasterInstanceType:
    Value: m5.xlarge
  OperatorVersion:
    Value: 7.3.0
  VPCID:
    Value: !Ref VPC
  VPCPeeringConnectionID:
    Value: !Ref VPCPeeringConnection
Resources:
  MasterRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: 8y5ck-master-EC2-K8S-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: ec2.amazonaws.com
          Action: "sts:AssumeRole"
  MasterRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: 8y5ck-master-EC2-K8S-Policy
      Roles:
        - Ref: "MasterRole"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "ec2:*"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "s3:GetBucketLocation"
              - "s3:ListAllMyBuckets"
            Resource: "*"
          - Effect: "Allow"
            Action: "s3:ListBucket"
            Resource: "arn:aws:s3:::tenant-account-g8s-8y5ck"
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: "arn:aws:s3:::tenant-account-g8s-8y5ck/*"
          - Effect: "Allow"
            Action: "elasticloadbalancing:*"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "autoscaling:DescribeAutoScalingGroups"
              - "autoscaling:DescribeAutoScalingInstances"
              - "autoscaling:DescribeTags"
              - "autoscaling:DescribeLaunchConfigurations"
              - "ec2:DescribeLaunchTemplateVersions"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "autoscaling:SetDesiredCapacity"
              - "autoscaling:TerminateInstanceInAutoScalingGroup"
            Resource: "*"
            Condition:
              StringEquals:
                autoscaling:ResourceTag/giantswarm.io/cluster: "8y5ck"
  IAMManagerRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: 8y5ck-IAMManager-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            AWS: !GetAtt MasterRole.Arn
          Action: "sts:AssumeRole"
  IAMManagerRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: 8y5ck-IAMManager-Policy
      Roles:
        - Ref: "IAMManagerRole"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Action: "sts:AssumeRole"
          Resource: "*"
  MasterInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: 8y5ck-master-EC2-K8S-Role
      Roles:
        - Ref: "MasterRole"
  MasterInstance8Y5CK78968:
    Type: "AWS::EC2::Instance"
    Description: Master instance
    DependsOn:
    - DockerVolume8Y5CK78968
    - EtcdVolume
    Properties:
      AvailabilityZone: eu-central-1b
      DisableApiTermination: true
      IamInstanceProfile: !Ref MasterInstanceProfile
      ImageId: ami-038cea5071a5ee580
      InstanceType: m5.xlarge
      Monitoring: false
      SecurityGroupIds:
      - !Ref MasterSecurityGroup
      SubnetId: !Ref PrivateSubnetEuCentral1b
      UserData: ewogICJpZ25pdGlvbiI6IHsKICAgICJ2ZXJzaW9uIjogIjIuMi4wIiwKICAgICJjb25maWciOiB7CiAgICAgICJhcHBlbmQiOiBbCiAgICAgICAgewogICAgICAgICAgInNvdXJjZSI6ICJzMzovL3RlbmFudC1hY2NvdW50LWc4cy04eTVjay92ZXJzaW9uLzcuMy4wL2Nsb3VkY29uZmlnL3ZfNF85XzAvY2x1c3Rlci04eTVjay10Y2NwIgogICAgICAgIH0KICAgICAgXQogICAgfQogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiZmlsZXN5c3RlbXMiOiBbCiAgICAgIHsKICAgICAgICAibmFtZSI6ICJkb2NrZXIiLAogICAgICAgICJtb3VudCI6IHsKICAgICAgICAgICJkZXZpY2UiOiAiL2Rldi94dmRjIiwKICAgICAgICAgICJ3aXBlRmlsZXN5c3RlbSI6IHRydWUsCiAgICAgICAgICAibGFiZWwiOiAiZG9ja2VyIiwKICAgICAgICAgICJmb3JtYXQiOiAieGZzIgogICAgICAgIH0KICAgICAgfSwKICAgICAgewogICAgICAgICJuYW1lIjogImxvZyIsCiAgICAgICAgIm1vdW50IjogewogICAgICAgICAgImRldmljZSI6ICIvZGV2L3h2ZGYiLAogICAgICAgICAgIndpcGVGaWxlc3lzdGVtIjogdHJ1ZSwKICAgICAgICAgICJsYWJlbCI6ICJsb2ciLAogICAgICAgICAgImZvcm1hdCI6ICJ4ZnMiCiAgICAgICAgfQogICAgICB9LAogICAgICB7CiAgICAgICAgIm5hbWUiOiAiZXRjZCIsCiAgICAgICAgIm1vdW50IjogewogICAgICAgICAgImRldmljZSI6ICIvZGV2L3h2ZGgiLAogICAgICAgICAgIndpcGVGaWxlc3lzdGVtIjogZmFsc2UsCiAgICAgICAgICAibGFiZWwiOiAiZXRjZCIsCiAgICAgICAgICAiZm9ybWF0IjogImV4dDQiCiAgICAgICAgfQogICAgICB9CiAgICBdCiAgfQp9Cg==
      Tags:
      - Key: Name
        Value: 8y5ck-master
  DockerVolume8Y5CK78968:
    Type: AWS::EC2::Volume
    Properties:

      Encrypted: true

      Size: 50
      VolumeType: gp2
      AvailabilityZone: eu-central-1b
      Tags:
      - Key: Name
        Value: 8y5ck-docker
  EtcdVolume:
    Type: AWS::EC2::Volume
    Properties:

      Encrypted: true

      Size: 100
      VolumeType: gp2
      AvailabilityZone: eu-central-1b
      Tags:
      - Key: Name
        Value: 8y5ck-etcd
  LogVolume:
    Type: AWS::EC2::Volume
    Properties:

      Encrypted: true

      Size: 100
      VolumeType: gp2
      AvailabilityZone: eu-central-1b
      Tags:
      - Key: Name
        Value: 8y5ck-log
  MasterInstance8Y5CK78968DockerMountPoint:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref MasterInstance8Y5CK78968
      VolumeId: !Ref DockerVolume8Y5CK78968
      Device: /dev/xvdc
  MasterInstance8Y5CK78968EtcdMountPoint:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref MasterInstance8Y5CK78968
      VolumeId: !Ref EtcdVolume
      Device: /dev/xvdh
  MasterInstance8Y5CK78968LogMountPoint:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref MasterInstance8Y5CK78968
      VolumeId: !Ref LogVolume
      Device: /dev/xvdf
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - PublicRouteTableEuCentral1a
      - PublicRouteTableEuCentral1b
      - PublicRouteTableEuCentral1c
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId: !Ref VPC
  PublicInternetGatewayRouteEuCentral1a:
    Type: AWS::EC2::Route
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1a
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicInternetGatewayRouteEuCentral1b:
    Type: AWS::EC2::Route
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1b
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicInternetGatewayRouteEuCentral1c:
    Type: AWS::EC2::Route
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1c
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  
  ApiInternalLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      ConnectionSettings:
        IdleTimeout: 1200
      HealthCheck:
        HealthyThreshold: 2
        Interval: 5
        Target: TCP:443
        Timeout: 3
        UnhealthyThreshold: 2
      Instances:
      - !Ref MasterInstance8Y5CK78968
      Listeners:
      
      - InstancePort: 443
        InstanceProtocol: TCP
        LoadBalancerPort: 443
        Protocol: TCP
      
      LoadBalancerName: 8y5ck-api-internal
      Scheme: internal
      SecurityGroups:
        - !Ref APIInternalELBSecurityGroup
      Subnets:
        - !Ref PrivateSubnetEuCentral1b
      
  ApiLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      ConnectionSettings:
        IdleTimeout: 1200
      HealthCheck:
        HealthyThreshold: 2
        Interval: 5
        Target: TCP:443
        Timeout: 3
        UnhealthyThreshold: 2
      Instances:
      - !Ref MasterInstance8Y5CK78968
      Listeners:
      
      - InstancePort: 443
        InstanceProtocol: TCP
        LoadBalancerPort: 443
        Protocol: TCP
      
      LoadBalancerName: 8y5ck-api
      Scheme: internet-facing
      SecurityGroups:
        - !Ref MasterSecurityGroup
      Subnets:
        - !Ref PublicSubnetEuCentral1a
      
        - !Ref PublicSubnetEuCentral1b
      
        - !Ref PublicSubnetEuCentral1c
      

  EtcdLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionSettings:
        IdleTimeout: 1200
      HealthCheck:
        HealthyThreshold: 2
        Interval: 5
        Target: TCP:2379
        Timeout: 3
        UnhealthyThreshold: 2
      Instances:
      - !Ref MasterInstance8Y5CK78968
      Listeners:
      
      - InstancePort: 2379
        InstanceProtocol: TCP
        LoadBalancerPort: 2379
        Protocol: TCP
      
      LoadBalancerName: 8y5ck-etcd
      Scheme: internal
      SecurityGroups:
        - !Ref EtcdELBSecurityGroup
      Subnets:
        - !Ref PrivateSubnetEuCentral1b
      
  
  NATGatewayEuCentral1a:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATEIPEuCentral1a
        - AllocationId
      SubnetId: !Ref PublicSubnetEuCentral1a
      Tags:
        - Key: giantswarm.io/availability-zone
          Value: eu-central-1a
  NATEIPEuCentral1a:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGatewayEuCentral1b:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATEIPEuCentral1b
        - AllocationId
      SubnetId: !Ref PublicSubnetEuCentral1b
      Tags:
        - Key: giantswarm.io/availability-zone
          Value: eu-central-1b
  NATEIPEuCentral1b:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGatewayEuCentral1c:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATEIPEuCentral1c
        - AllocationId
      SubnetId: !Ref PublicSubnetEuCentral1c
      Tags:
        - Key: giantswarm.io/availability-zone
          Value: eu-central-1c
  NATEIPEuCentral1c:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATRouteEuCentral1b:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1b
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayEuCentral1b
  
  
  PublicRouteTableEuCentral1a:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1a
      - Key: giantswarm.io/route-table-type
        Value: public
  PublicRouteTableEuCentral1b:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1b
      - Key: giantswarm.io/route-table-type
        Value: public
  PublicRouteTableEuCentral1c:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1c
      - Key: giantswarm.io/route-table-type
        Value: public
  PrivateRouteTableEuCentral1b:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: giantswarm.io/availability-zone
        Value: eu-central-1b
      - Key: giantswarm.io/route-table-type
        Value: private
  VPCPeeringRouteEuCentral1b:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1b
      DestinationCidrBlock: 10.1.0.0/16
      VpcPeeringConnectionId:
        Ref: VPCPeeringConnection
  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 8y5ck-master
      VpcId: !Ref VPC
      SecurityGroupIngress:
      
      -
        Description: Allow all traffic to the master instance.
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      -
        Description: Allow traffic from control plane CIDR to 4194 for cadvisor scraping.
        IpProtocol: tcp
        FromPort: 4194
        ToPort: 4194
        CidrIp: 10.1.0.0/16
      -
        Description: Allow traffic from control plane CIDR to 2379 for etcd backup.
        IpProtocol: tcp
        FromPort: 2379
        ToPort: 2379
        CidrIp: 10.1.0.0/16
      -
        Description: Allow traffic from control plane CIDR to 10250 for kubelet scraping.
        IpProtocol: tcp
        FromPort: 10250
        ToPort: 10250
        CidrIp: 10.1.0.0/16
      -
        Description: Allow traffic from control plane CIDR to 10300 for node-exporter scraping.
        IpProtocol: tcp
        FromPort: 10300
        ToPort: 10300
        CidrIp: 10.1.0.0/16
      -
        Description: Allow traffic from control plane CIDR to 10301 for kube-state-metrics scraping.
        IpProtocol: tcp
        FromPort: 10301
        ToPort: 10301
        CidrIp: 10.1.0.0/16
      -
        Description: Only allow ssh traffic from the control plane.
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.1.0.0/16
      Tags:
        - Key: Name
          Value:  8y5ck-master
  EtcdELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 8y5ck-etcd-elb
      VpcId: !Ref VPC
      SecurityGroupIngress:
      
      -
        IpProtocol: tcp
        FromPort: 2379
        ToPort: 2379
        CidrIp: 0.0.0.0/0
      
      -
        IpProtocol: tcp
        FromPort: 2379
        ToPort: 2379
        CidrIp: 10.1.0.0/16
      
      Tags:
        - Key: Name
          Value: 8y5ck-etcd-elb
  APIInternalELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 8y5ck-internal-api
      VpcId: !Ref VPC
      SecurityGroupIngress:
      
      -
        Description: Allow all traffic to the master instance from A class network.
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.0.0.0/8
      
      -
        Description: Allow all traffic to the master instance from B class network.
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 172.16.0.0/12
      
      -
        Description: Allow all traffic to the master instance from C class network.
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 192.168.0.0/16
      
      Tags:
        - Key: Name
          Value: 8y5ck-internal-api
  MasterAllowCalicoIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterSecurityGroup
    Properties:
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref MasterSecurityGroup
  MasterAllowEtcdIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterSecurityGroup
    Properties:
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: "tcp"
      FromPort: 2379
      ToPort: 2379
      SourceSecurityGroupId: !Ref EtcdELBSecurityGroup
  VPCDefaultSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outbound traffic from loopback address.
      GroupId: !GetAtt VPC.DefaultSecurityGroup
      IpProtocol: -1
      CidrIp: 127.0.0.1/32
  
  PublicSubnetEuCentral1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1a
      CidrBlock: 10.100.3.32/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PublicSubnetEuCentral1a
      - Key: giantswarm.io/subnet-type
        Value: public
      - Key: kubernetes.io/role/elb
        Value: 1
      VpcId: !Ref VPC
  PublicSubnetRouteTableAssociationEuCentral1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1a
      SubnetId: !Ref PublicSubnetEuCentral1a
  PublicSubnetEuCentral1b:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1b
      CidrBlock: 10.100.3.96/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PublicSubnetEuCentral1b
      - Key: giantswarm.io/subnet-type
        Value: public
      - Key: kubernetes.io/role/elb
        Value: 1
      VpcId: !Ref VPC
  PublicSubnetRouteTableAssociationEuCentral1b:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1b
      SubnetId: !Ref PublicSubnetEuCentral1b
  PublicSubnetEuCentral1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1c
      CidrBlock: 10.100.3.160/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PublicSubnetEuCentral1c
      - Key: giantswarm.io/subnet-type
        Value: public
      - Key: kubernetes.io/role/elb
        Value: 1
      VpcId: !Ref VPC
  PublicSubnetRouteTableAssociationEuCentral1c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableEuCentral1c
      SubnetId: !Ref PublicSubnetEuCentral1c
  PrivateSubnetEuCentral1b:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1b
      CidrBlock: 10.100.3.64/27
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PrivateSubnetEuCentral1b
      - Key: giantswarm.io/subnet-type
        Value: private
      - Key: kubernetes.io/role/internal-elb
        Value: 1
      VpcId: !Ref VPC
  PrivateSubnetRouteTableAssociationEuCentral1b:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableEuCentral1b
      SubnetId: !Ref PrivateSubnetEuCentral1b
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: 8y5ck
  VPCPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Properties:
      VpcId: !Ref VPC
      PeerVpcId: vpc-testid
      # PeerOwnerId may be a number starting with 0. Cloud Formation is not able
      # to properly deal with that by its own so the configured value must be
      # quoted in order to ensure the peer owner id is properly handled as
      # string. Otherwise stack creation fails.
      PeerOwnerId: "control-plane-account"
      PeerRoleArn: peer-role-arn
  VPCS3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPC
      RouteTableIds:
        - !Ref PublicRouteTableEuCentral1a
        - !Ref PublicRouteTableEuCentral1b
        - !Ref PublicRouteTableEuCentral1c
        - !Ref PrivateRouteTableEuCentral1b
      ServiceName: com.amazonaws.eu-central-1.s3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "8y5ck-vpc-s3-endpoint-policy-bucket"
            Principal: "*"
            Effect: "Allow"
            Action: "s3:*"
            Resource: "arn:aws:s3:::*"
          - Sid: "8y5ck-vpc-s3-endpoint-policy-object"
            Principal : "*"
            Effect: "Allow"
            Action: "s3:*"
            Resource: "arn:aws:s3:::*/*"