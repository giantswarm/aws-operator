AWSTemplateFormatVersion: 2010-09-09
Description: Tenant Cluster Control Plane Nodes Cloud Formation Stack.
Outputs:
  InstanceType:
    Value: m5.xlarge
  MasterReplicas:
    Value: 3
  OperatorVersion:
    Value: 7.3.0
  ReleaseVersion:
    Value: 100.0.0
Resources:
  ControlPlaneNodeAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - MasterEni
    - EtcdVolume
    Properties:
      VPCZoneIdentifier:
        - subnet-id-eu-central-1a
      AvailabilityZones:
        - eu-central-1a
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref ControlPlaneNodeLaunchTemplate
            Version: !GetAtt ControlPlaneNodeLaunchTemplate.LatestVersionNumber
      LoadBalancerNames:
      - 8y5ck-api-internal
      - 8y5ck-api
      - 8y5ck-etcd
      # We define lifecycle hook only in case of HA masters. In case of 1 masters
      # the draining would not work as the API is down when we try to roll the instance.
      # We define a lifecycle hook as part of the ASG in order to drain nodes
      # properly on Node Pool deletion. Earlier we defined a separate lifecycle
      # hook referencing the ASG name. In this setting when deleting a Node Pool
      # the lifecycle hook was never executed. We always want node draining for
      # reliably managing customer workloads.
      # The launching hook has always has to be higher than the terminating one to ensure
      # the etcd volume is detached before the instance is marked as healthy.
      LifecycleHookSpecificationList:
        - DefaultResult: CONTINUE
          HeartbeatTimeout: 1020
          LifecycleHookName: ControlPlaneLaunching
          LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
        - DefaultResult: CONTINUE
          HeartbeatTimeout: 900
          LifecycleHookName: ControlPlane
          LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      # 60 seconds after a new node comes into service, the ASG checks the new
      # instance's health.
      HealthCheckGracePeriod: 60

      MetricsCollection:
        - Granularity: "1Minute"

      Tags:
        - Key: Name
          Value: 8y5ck-master
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:

        # Minimum amount of nodes that must always be running during a rolling
        # update.
        MinInstancesInService: 0

        # Maximum amount of nodes being rolled at the same time.
        MaxBatchSize: 1

        # We pause the roll of the master ASG for 2 mins to give master
        # time to properly join k8s cluster before rolling another one.
        PauseTime: PT2M
  ControlPlaneNodeAutoScalingGroup2:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - MasterEni2
    - EtcdVolume2
    Properties:
      VPCZoneIdentifier:
        - subnet-id-eu-central-1b
      AvailabilityZones:
        - eu-central-1b
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref ControlPlaneNodeLaunchTemplate2
            Version: !GetAtt ControlPlaneNodeLaunchTemplate2.LatestVersionNumber
      LoadBalancerNames:
      - 8y5ck-api-internal
      - 8y5ck-api
      - 8y5ck-etcd
      # We define lifecycle hook only in case of HA masters. In case of 1 masters
      # the draining would not work as the API is down when we try to roll the instance.
      # We define a lifecycle hook as part of the ASG in order to drain nodes
      # properly on Node Pool deletion. Earlier we defined a separate lifecycle
      # hook referencing the ASG name. In this setting when deleting a Node Pool
      # the lifecycle hook was never executed. We always want node draining for
      # reliably managing customer workloads.
      # The launching hook has always has to be higher than the terminating one to ensure
      # the etcd volume is detached before the instance is marked as healthy.
      LifecycleHookSpecificationList:
        - DefaultResult: CONTINUE
          HeartbeatTimeout: 1020
          LifecycleHookName: ControlPlaneLaunching
          LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
        - DefaultResult: CONTINUE
          HeartbeatTimeout: 900
          LifecycleHookName: ControlPlane
          LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      # 60 seconds after a new node comes into service, the ASG checks the new
      # instance's health.
      HealthCheckGracePeriod: 60

      MetricsCollection:
        - Granularity: "1Minute"

      Tags:
        - Key: Name
          Value: 8y5ck-master
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:

        # Minimum amount of nodes that must always be running during a rolling
        # update.
        MinInstancesInService: 0

        # Maximum amount of nodes being rolled at the same time.
        MaxBatchSize: 1

        # We pause the roll of the master ASG for 2 mins to give master
        # time to properly join k8s cluster before rolling another one.
        PauseTime: PT2M
  ControlPlaneNodeAutoScalingGroup3:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - MasterEni3
    - EtcdVolume3
    Properties:
      VPCZoneIdentifier:
        - subnet-id-eu-central-1c
      AvailabilityZones:
        - eu-central-1c
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref ControlPlaneNodeLaunchTemplate3
            Version: !GetAtt ControlPlaneNodeLaunchTemplate3.LatestVersionNumber
      LoadBalancerNames:
      - 8y5ck-api-internal
      - 8y5ck-api
      - 8y5ck-etcd
      # We define lifecycle hook only in case of HA masters. In case of 1 masters
      # the draining would not work as the API is down when we try to roll the instance.
      # We define a lifecycle hook as part of the ASG in order to drain nodes
      # properly on Node Pool deletion. Earlier we defined a separate lifecycle
      # hook referencing the ASG name. In this setting when deleting a Node Pool
      # the lifecycle hook was never executed. We always want node draining for
      # reliably managing customer workloads.
      # The launching hook has always has to be higher than the terminating one to ensure
      # the etcd volume is detached before the instance is marked as healthy.
      LifecycleHookSpecificationList:
        - DefaultResult: CONTINUE
          HeartbeatTimeout: 1020
          LifecycleHookName: ControlPlaneLaunching
          LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
        - DefaultResult: CONTINUE
          HeartbeatTimeout: 900
          LifecycleHookName: ControlPlane
          LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      # 60 seconds after a new node comes into service, the ASG checks the new
      # instance's health.
      HealthCheckGracePeriod: 60

      MetricsCollection:
        - Granularity: "1Minute"

      Tags:
        - Key: Name
          Value: 8y5ck-master
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:

        # Minimum amount of nodes that must always be running during a rolling
        # update.
        MinInstancesInService: 0

        # Maximum amount of nodes being rolled at the same time.
        MaxBatchSize: 1

        # We pause the roll of the master ASG for 2 mins to give master
        # time to properly join k8s cluster before rolling another one.
        PauseTime: PT2M
  MasterEni:
    Type: AWS::EC2::NetworkInterface
    Properties:
       Description: A Network interface used for etcd.
       GroupSet:
       - master-security-group-id
       SubnetId: subnet-id-eu-central-1a
       Tags:
       - Key: Name
         Value: 8y5ck-master1-eni
       - Key: node.k8s.amazonaws.com/no_manage
         Value: "true"
  MasterEni2:
    Type: AWS::EC2::NetworkInterface
    Properties:
       Description: A Network interface used for etcd.
       GroupSet:
       - master-security-group-id
       SubnetId: subnet-id-eu-central-1b
       Tags:
       - Key: Name
         Value: 8y5ck-master2-eni
       - Key: node.k8s.amazonaws.com/no_manage
         Value: "true"
  MasterEni3:
    Type: AWS::EC2::NetworkInterface
    Properties:
       Description: A Network interface used for etcd.
       GroupSet:
       - master-security-group-id
       SubnetId: subnet-id-eu-central-1c
       Tags:
       - Key: Name
         Value: 8y5ck-master3-eni
       - Key: node.k8s.amazonaws.com/no_manage
         Value: "true"
  EtcdVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: eu-central-1a
      Encrypted: true
      Size: 100
      SnapshotId: snap-1234567890abcdef0
      Tags:
      - Key: Name
        Value: 8y5ck-master1-etcd
      VolumeType: gp3
  EtcdVolume2:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: eu-central-1b
      Encrypted: true
      Size: 100
      Tags:
      - Key: Name
        Value: 8y5ck-master2-etcd
      VolumeType: gp3
  EtcdVolume3:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: eu-central-1c
      Encrypted: true
      Size: 100
      Tags:
      - Key: Name
        Value: 8y5ck-master3-etcd
      VolumeType: gp3
  ControlPlaneNodesRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: gs-cluster-8y5ck-role-tccpn
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: ec2.amazonaws.com
          Action: "sts:AssumeRole"
  ControlPlaneNodesRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: gs-cluster-8y5ck-policy-tccpn
      Roles:
        - Ref: ControlPlaneNodesRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "ec2:*"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "kms:CreateGrant"
              - "kms:ListGrants"
              - "kms:RevokeGrant"
            Resource: "*"
            Condition:
              Bool:
                kms:GrantIsForAWSResource: "true"
          - Effect: "Allow"
            Action:
              - "s3:GetBucketLocation"
              - "s3:ListAllMyBuckets"
            Resource: "*"
          - Effect: "Allow"
            Action: "s3:ListBucket"
            Resource: "arn:aws:s3:::tenant-account-g8s-8y5ck"
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: "arn:aws:s3:::tenant-account-g8s-8y5ck/*"
          - Effect: "Allow"
            Action: "elasticloadbalancing:*"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "autoscaling:DescribeAutoScalingGroups"
              - "autoscaling:DescribeAutoScalingInstances"
              - "autoscaling:DescribeTags"
              - "autoscaling:DescribeLaunchConfigurations"
              - "autoscaling:SetInstanceHealth"
              - "autoscaling:CompleteLifecycleAction"
              - "ec2:DescribeLaunchTemplateVersions"
              - "ec2:DescribeInstanceTypes"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "autoscaling:SetDesiredCapacity"
              - "autoscaling:TerminateInstanceInAutoScalingGroup"
            Resource: "*"
            Condition:
              StringEquals:
                autoscaling:ResourceTag/giantswarm.io/cluster: "8y5ck"
          - Effect: "Allow"
            Action:
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:GetRepositoryPolicy"
              - "ecr:DescribeRepositories"
              - "ecr:ListImages"
              - "ecr:BatchGetImage"
            Resource: "*"
          # Following rules are required to make the AWS CNI work. See also
          # https://github.com/aws/amazon-vpc-cni-k8s#setup.
          - Effect: Allow
            Action:
              - ec2:AssignPrivateIpAddresses
              - ec2:AttachNetworkInterface
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeInstances
              - ec2:DescribeInstanceTypes
              - ec2:DescribeTags
              - ec2:DescribeNetworkInterfaces
              - ec2:DetachNetworkInterface
              - ec2:ModifyNetworkInterfaceAttribute
              - ec2:UnassignPrivateIpAddresses
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:CreateTags
            Resource:
              - arn:aws:ec2:*:*:network-interface/*
          #### Used for EFS
          - Effect: Allow
            Action:
            - elasticfilesystem:DescribeAccessPoints
            - elasticfilesystem:DescribeFileSystems
            - elasticfilesystem:DescribeMountTargets
            - ec2:DescribeAvailabilityZones
            Resource: "*"
          - Effect: Allow
            Action:
            - elasticfilesystem:CreateAccessPoint
            Resource: "*"
            Condition:
              StringLike:
                aws:RequestTag/efs.csi.aws.com/cluster: 'true'
          - Effect: Allow
            Action: elasticfilesystem:DeleteAccessPoint
            Resource: "*"
            Condition:
              StringEquals:
                aws:ResourceTag/efs.csi.aws.com/cluster: 'true'
  ControlPlaneNodesInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: gs-cluster-8y5ck-profile-tccpn
      Roles:
        - Ref: ControlPlaneNodesRole
  IAMManagerRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: 8y5ck-IAMManager-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            AWS: !GetAtt ControlPlaneNodesRole.Arn
          Action: "sts:AssumeRole"
  IAMManagerRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: 8y5ck-IAMManager-Policy
      Roles:
        - Ref: "IAMManagerRole"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Action: "sts:AssumeRole"
          Resource: "*"
  ALBControllerRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: gs-8y5ck-ALBController-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !GetAtt IAMManagerRole.Arn
            Action: "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              Federated: "arn:aws:iam::tenant-account:oidc-provider/122424fd.cloudfront.net"
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringLike:
                "122424fd.cloudfront.net:sub": "system:serviceaccount:*:aws-load-balancer-controller*"
  ALBControllerRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: gs-8y5ck-ALBController-Policy
      Roles:
        - Ref: "ALBControllerRole"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'iam:CreateServiceLinkedRole'
            Resource: '*'
            Condition:
              StringEquals:
                'iam:AWSServiceName': elasticloadbalancing.amazonaws.com
          - Effect: Allow
            Action:
              - 'ec2:DescribeAccountAttributes'
              - 'ec2:DescribeAddresses'
              - 'ec2:DescribeAvailabilityZones'
              - 'ec2:DescribeInternetGateways'
              - 'ec2:DescribeVpcs'
              - 'ec2:DescribeVpcPeeringConnections'
              - 'ec2:DescribeSubnets'
              - 'ec2:DescribeSecurityGroups'
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:DescribeTags'
              - 'ec2:GetCoipPoolUsage'
              - 'ec2:DescribeCoipPools'
              - 'elasticloadbalancing:DescribeLoadBalancers'
              - 'elasticloadbalancing:DescribeLoadBalancerAttributes'
              - 'elasticloadbalancing:DescribeListeners'
              - 'elasticloadbalancing:DescribeListenerCertificates'
              - 'elasticloadbalancing:DescribeSSLPolicies'
              - 'elasticloadbalancing:DescribeRules'
              - 'elasticloadbalancing:DescribeTargetGroups'
              - 'elasticloadbalancing:DescribeTargetGroupAttributes'
              - 'elasticloadbalancing:DescribeTargetHealth'
              - 'elasticloadbalancing:DescribeTags'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'cognito-idp:DescribeUserPoolClient'
              - 'acm:ListCertificates'
              - 'acm:DescribeCertificate'
              - 'iam:ListServerCertificates'
              - 'iam:GetServerCertificate'
              - 'waf-regional:GetWebACL'
              - 'waf-regional:GetWebACLForResource'
              - 'waf-regional:AssociateWebACL'
              - 'waf-regional:DisassociateWebACL'
              - 'wafv2:GetWebACL'
              - 'wafv2:GetWebACLForResource'
              - 'wafv2:AssociateWebACL'
              - 'wafv2:DisassociateWebACL'
              - 'shield:GetSubscriptionState'
              - 'shield:DescribeProtection'
              - 'shield:CreateProtection'
              - 'shield:DeleteProtection'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ec2:AuthorizeSecurityGroupIngress'
              - 'ec2:RevokeSecurityGroupIngress'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ec2:CreateSecurityGroup'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ec2:CreateTags'
            Resource: 'arn:aws:ec2:*:*:security-group/*'
            Condition:
              StringEquals:
                'ec2:CreateAction': CreateSecurityGroup
              'Null':
                'aws:RequestTag/elbv2.k8s.aws/cluster': 'false'
          - Effect: Allow
            Action:
              - 'ec2:CreateTags'
              - 'ec2:DeleteTags'
            Resource: 'arn:aws:ec2:*:*:security-group/*'
            Condition:
              'Null':
                'aws:RequestTag/elbv2.k8s.aws/cluster': 'true'
                'aws:ResourceTag/elbv2.k8s.aws/cluster': 'false'
          - Effect: Allow
            Action:
              - 'ec2:AuthorizeSecurityGroupIngress'
              - 'ec2:RevokeSecurityGroupIngress'
              - 'ec2:DeleteSecurityGroup'
            Resource: '*'
            Condition:
              'Null':
                'aws:ResourceTag/elbv2.k8s.aws/cluster': 'false'
          - Effect: Allow
            Action:
              - 'elasticloadbalancing:CreateLoadBalancer'
              - 'elasticloadbalancing:CreateTargetGroup'
            Resource: '*'
            Condition:
              'Null':
                'aws:RequestTag/elbv2.k8s.aws/cluster': 'false'
          - Effect: Allow
            Action:
              - 'elasticloadbalancing:CreateListener'
              - 'elasticloadbalancing:DeleteListener'
              - 'elasticloadbalancing:CreateRule'
              - 'elasticloadbalancing:DeleteRule'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'elasticloadbalancing:AddTags'
              - 'elasticloadbalancing:RemoveTags'
            Resource:
              - 'arn:aws:elasticloadbalancing:*:*:targetgroup/*/*'
              - 'arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*'
              - 'arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*'
            Condition:
              'Null':
                'aws:RequestTag/elbv2.k8s.aws/cluster': 'true'
                'aws:ResourceTag/elbv2.k8s.aws/cluster': 'false'
          - Effect: Allow
            Action:
              - 'elasticloadbalancing:AddTags'
              - 'elasticloadbalancing:RemoveTags'
            Resource:
              - 'arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*'
              - 'arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*'
              - 'arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*'
              - 'arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*'
          - Effect: Allow
            Action:
              - 'elasticloadbalancing:ModifyLoadBalancerAttributes'
              - 'elasticloadbalancing:SetIpAddressType'
              - 'elasticloadbalancing:SetSecurityGroups'
              - 'elasticloadbalancing:SetSubnets'
              - 'elasticloadbalancing:DeleteLoadBalancer'
              - 'elasticloadbalancing:ModifyTargetGroup'
              - 'elasticloadbalancing:ModifyTargetGroupAttributes'
              - 'elasticloadbalancing:DeleteTargetGroup'
            Resource: '*'
            Condition:
              'Null':
                'aws:ResourceTag/elbv2.k8s.aws/cluster': 'false'
          - Effect: Allow
            Action:
              - 'elasticloadbalancing:AddTags'
            Resource:
              - 'arn:aws:elasticloadbalancing:*:*:targetgroup/*/*'
              - 'arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*'
              - 'arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*'
            Condition:
              StringEquals:
                'elasticloadbalancing:CreateAction':
                  - CreateTargetGroup
                  - CreateLoadBalancer
              'Null':
                'aws:RequestTag/elbv2.k8s.aws/cluster': 'false'
          - Effect: Allow
            Action:
              - 'elasticloadbalancing:RegisterTargets'
              - 'elasticloadbalancing:DeregisterTargets'
            Resource: 'arn:aws:elasticloadbalancing:*:*:targetgroup/*/*'
          - Effect: Allow
            Action:
              - 'elasticloadbalancing:SetWebAcl'
              - 'elasticloadbalancing:ModifyListener'
              - 'elasticloadbalancing:AddListenerCertificates'
              - 'elasticloadbalancing:RemoveListenerCertificates'
              - 'elasticloadbalancing:ModifyRule'
            Resource: '*'
  Route53ManagerRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: 8y5ck-Route53Manager-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !GetAtt IAMManagerRole.Arn
            Action: "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              Federated: "arn:aws:iam::tenant-account:oidc-provider/122424fd.cloudfront.net"
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringLike:
                "122424fd.cloudfront.net:sub": "system:serviceaccount:*:*external-dns*"
  Route53ManagerRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: 8y5ck-Route53Manager-Policy
      Roles:
        - Ref: "Route53ManagerRole"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "route53:ChangeResourceRecordSets"
            Resource:
              - "arn:aws:route53:::hostedzone/hosted-zone-id"
              - "arn:aws:route53:::hostedzone/hosted-zone-internal-id"
          - Effect: "Allow"
            Action:
              - "route53:ListHostedZones"
              - "route53:ListResourceRecordSets"
            Resource: "*"
  ControlPlaneNodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: 8y5ck-master1-launch-template
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: /dev/xvdc
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 100
            VolumeType: gp3
        - DeviceName: /dev/xvdg
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 100
            VolumeType: gp3
        - DeviceName: /dev/xvdf
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 100
            VolumeType: gp3
        - DeviceName: /dev/xvdi
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 100
            VolumeType: gp3
        IamInstanceProfile:
          Name: !Ref ControlPlaneNodesInstanceProfile
        ImageId: ami-0a9a5d2b65cce04eb
        InstanceType: m5.xlarge
        MetadataOptions:
          HttpTokens: optional
          HttpPutResponseHopLimit: 2
        Monitoring:
          Enabled: false
        NetworkInterfaces:
          - AssociatePublicIpAddress: false
            DeviceIndex: 0
            Groups:
            - master-security-group-id
        TagSpecifications:
        - ResourceType: instance
          Tags:
            - Key: giantswarm.io/release
              Value: 100.0.0
        UserData:
          Fn::Base64: |
            {
              "ignition": {
                "version": "2.2.0",
                "config": {
                  "append": [
                    {
                      "source": "s3://tenant-account-g8s-8y5ck/version/7.3.0/cloudconfig/v_6_1_0/cluster-8y5ck-tccpn-1"
                    }
                  ]
                }
              },
              "storage": {
                "filesystems": [
                  {
                    "name": "docker",
                    "mount": {
                      "device": "/dev/xvdc",
                      "wipeFilesystem": true,
                      "label": "docker",
                      "format": "xfs"
                    }
                  },
                  {
                    "name": "kubelet",
                    "mount": {
                      "device": "/dev/xvdg",
                      "wipeFilesystem": true,
                      "label": "kubelet",
                      "format": "xfs"
                    }
                  },
                  {
                    "name": "log",
                    "mount": {
                      "device": "/dev/xvdf",
                      "wipeFilesystem": true,
                      "label": "log",
                      "format": "xfs"
                    }
                  },
                  {
                    "name": "containerd",
                    "mount": {
                      "device": "/dev/xvdi",
                      "wipeFilesystem": true,
                      "label": "containerd",
                      "format": "xfs"
                    }
                  }
                ]
              }
            }
  ControlPlaneNodeLaunchTemplate2:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: 8y5ck-master2-launch-template
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: /dev/xvdc
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 100
            VolumeType: gp3
        - DeviceName: /dev/xvdg
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 100
            VolumeType: gp3
        - DeviceName: /dev/xvdf
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 100
            VolumeType: gp3
        - DeviceName: /dev/xvdi
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 100
            VolumeType: gp3
        IamInstanceProfile:
          Name: !Ref ControlPlaneNodesInstanceProfile
        ImageId: ami-0a9a5d2b65cce04eb
        InstanceType: m5.xlarge
        MetadataOptions:
          HttpTokens: optional
          HttpPutResponseHopLimit: 2
        Monitoring:
          Enabled: false
        NetworkInterfaces:
          - AssociatePublicIpAddress: false
            DeviceIndex: 0
            Groups:
            - master-security-group-id
        TagSpecifications:
        - ResourceType: instance
          Tags:
            - Key: giantswarm.io/release
              Value: 100.0.0
        UserData:
          Fn::Base64: |
            {
              "ignition": {
                "version": "2.2.0",
                "config": {
                  "append": [
                    {
                      "source": "s3://tenant-account-g8s-8y5ck/version/7.3.0/cloudconfig/v_6_1_0/cluster-8y5ck-tccpn-2"
                    }
                  ]
                }
              },
              "storage": {
                "filesystems": [
                  {
                    "name": "docker",
                    "mount": {
                      "device": "/dev/xvdc",
                      "wipeFilesystem": true,
                      "label": "docker",
                      "format": "xfs"
                    }
                  },
                  {
                    "name": "kubelet",
                    "mount": {
                      "device": "/dev/xvdg",
                      "wipeFilesystem": true,
                      "label": "kubelet",
                      "format": "xfs"
                    }
                  },
                  {
                    "name": "log",
                    "mount": {
                      "device": "/dev/xvdf",
                      "wipeFilesystem": true,
                      "label": "log",
                      "format": "xfs"
                    }
                  },
                  {
                    "name": "containerd",
                    "mount": {
                      "device": "/dev/xvdi",
                      "wipeFilesystem": true,
                      "label": "containerd",
                      "format": "xfs"
                    }
                  }
                ]
              }
            }
  ControlPlaneNodeLaunchTemplate3:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: 8y5ck-master3-launch-template
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: /dev/xvdc
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 100
            VolumeType: gp3
        - DeviceName: /dev/xvdg
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 100
            VolumeType: gp3
        - DeviceName: /dev/xvdf
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 100
            VolumeType: gp3
        - DeviceName: /dev/xvdi
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 100
            VolumeType: gp3
        IamInstanceProfile:
          Name: !Ref ControlPlaneNodesInstanceProfile
        ImageId: ami-0a9a5d2b65cce04eb
        InstanceType: m5.xlarge
        MetadataOptions:
          HttpTokens: optional
          HttpPutResponseHopLimit: 2
        Monitoring:
          Enabled: false
        NetworkInterfaces:
          - AssociatePublicIpAddress: false
            DeviceIndex: 0
            Groups:
            - master-security-group-id
        TagSpecifications:
        - ResourceType: instance
          Tags:
            - Key: giantswarm.io/release
              Value: 100.0.0
        UserData:
          Fn::Base64: |
            {
              "ignition": {
                "version": "2.2.0",
                "config": {
                  "append": [
                    {
                      "source": "s3://tenant-account-g8s-8y5ck/version/7.3.0/cloudconfig/v_6_1_0/cluster-8y5ck-tccpn-3"
                    }
                  ]
                }
              },
              "storage": {
                "filesystems": [
                  {
                    "name": "docker",
                    "mount": {
                      "device": "/dev/xvdc",
                      "wipeFilesystem": true,
                      "label": "docker",
                      "format": "xfs"
                    }
                  },
                  {
                    "name": "kubelet",
                    "mount": {
                      "device": "/dev/xvdg",
                      "wipeFilesystem": true,
                      "label": "kubelet",
                      "format": "xfs"
                    }
                  },
                  {
                    "name": "log",
                    "mount": {
                      "device": "/dev/xvdf",
                      "wipeFilesystem": true,
                      "label": "log",
                      "format": "xfs"
                    }
                  },
                  {
                    "name": "containerd",
                    "mount": {
                      "device": "/dev/xvdi",
                      "wipeFilesystem": true,
                      "label": "containerd",
                      "format": "xfs"
                    }
                  }
                ]
              }
            }
  ControlPlaneRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      ResourceRecords:
      - !GetAtt MasterEni.PrimaryPrivateIpAddress
      Name: 'etcd1.8y5ck.k8s.gauss.eu-central-1.aws.gigantic.io.'
      HostedZoneId: hosted-zone-internal-id
      Type: A
      TTL: 60
  ControlPlaneRecordSet2:
    Type: AWS::Route53::RecordSet
    Properties:
      ResourceRecords:
      - !GetAtt MasterEni2.PrimaryPrivateIpAddress
      Name: 'etcd2.8y5ck.k8s.gauss.eu-central-1.aws.gigantic.io.'
      HostedZoneId: hosted-zone-internal-id
      Type: A
      TTL: 60
  ControlPlaneRecordSet3:
    Type: AWS::Route53::RecordSet
    Properties:
      ResourceRecords:
      - !GetAtt MasterEni3.PrimaryPrivateIpAddress
      Name: 'etcd3.8y5ck.k8s.gauss.eu-central-1.aws.gigantic.io.'
      HostedZoneId: hosted-zone-internal-id
      Type: A
      TTL: 60
