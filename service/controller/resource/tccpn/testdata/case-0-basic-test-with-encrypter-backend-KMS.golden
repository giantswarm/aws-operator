AWSTemplateFormatVersion: 2010-09-09
Description: Tenant Cluster Control Plane Nodes Cloud Formation Stack.
Outputs:
  InstanceType:
    Value: m5.xlarge
  OperatorVersion:
    Value: 7.3.0
Resources:
  ControlPlaneNodeAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnetEuCentral1b
      AvailabilityZones:
        - eu-central-1b
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      LaunchConfigurationName: !Ref ControlPlaneNodeLaunchConfiguration

      # We define a lifecycle hook as part of the ASG in order to drain nodes
      # properly on Node Pool deletion. Earlier we defined a separate lifecycle
      # hook referencing the ASG name. In this setting when deleting a Node Pool
      # the lifecycle hook was never executed. We always want node draining for
      # reliably managing customer workloads.
      LifecycleHookSpecificationList:
        - DefaultResult: CONTINUE
          HeartbeatTimeout: 3600
          LifecycleHookName: ControlPlaneNode
          LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING

      # 10 seconds after a new node comes into service, the ASG checks the new
      # instance's health.
      HealthCheckGracePeriod: 10

      MetricsCollection:
        - Granularity: "1Minute"

      Tags:
        - Key: Name
          Value: 8y5ck-master
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:

        # Minimum amount of nodes that must always be running during a rolling
        # update.
        MinInstancesInService: 1

        # Maximum amount of nodes being rolled at the same time.
        MaxBatchSize: 1

        # After creating a new instance, pause the rolling update on the ASG for
        # 15 minutes.
        PauseTime: PT15M
  EtcdVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: eu-central-1b
      Encrypted: true
      Size: 100
      SnapshotId: snap-1234567890abcdef0
      Tags:
      - Key: Name
        Value: 8y5ck-etcd
      VolumeType: gp2
  ControlPlaneNodesRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: gs-cluster-8y5ck-role-tccpn
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: ec2.amazonaws.com
          Action: "sts:AssumeRole"
  ControlPlaneNodesRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: gs-cluster-8y5ck-policy-tccpn
      Roles:
        - Ref: ControlPlaneNodesRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "ec2:Describe*"
            Resource: "*"
          - Effect: "Allow"
            Action: "ec2:AttachVolume"
            Resource: "*"
          - Effect: "Allow"
            Action: "ec2:DetachVolume"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "s3:GetBucketLocation"
              - "s3:ListAllMyBuckets"
            Resource: "*"
          - Effect: "Allow"
            Action: "s3:ListBucket"
            Resource: "arn:aws:s3:::tenant-account-g8s-8y5ck"
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: "arn:aws:s3:::tenant-account-g8s-8y5ck/*"
          - Effect: "Allow"
            Action:
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:GetRepositoryPolicy"
              - "ecr:DescribeRepositories"
              - "ecr:ListImages"
              - "ecr:BatchGetImage"
            Resource: "*"
  ControlPlaneNodesInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: gs-cluster-8y5ck-profile-tccpn
      Roles:
        - Ref: ControlPlaneNodesRole
  ControlPlaneNodesLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      BlockDeviceMappings:
      - DeviceName: /dev/xvdc
        Ebs:
          DeleteOnTermination: true
          Encrypted: true
          VolumeSize: 100
          VolumeType: gp2
      - DeviceName: /dev/xvdg
        Ebs:
          DeleteOnTermination: true
          Encrypted: true
          VolumeSize: 100
          VolumeType: gp2
      - DeviceName: /dev/xvdf
        Ebs:
          DeleteOnTermination: true
          Encrypted: true
          VolumeSize: 100
          VolumeType: gp2
      IamInstanceProfile: !Ref ControlPlaneNodesInstanceProfile
      ImageId: ami-038cea5071a5ee580
      InstanceType: m5.xlarge
      InstanceMonitoring: true
      SecurityGroups:
      - !Ref MasterSecurityGroup
      UserData:
        Fn::Base64: |
          {
            "ignition": {
              "version": "2.2.0",
              "config": {
                "append": [
                  {
                    "source": "s3://tenant-account-g8s-8y5ck/version/7.3.0/cloudconfig/v_5_0_0/cluster-8y5ck-tccpn"
                  }
                ]
              }
            },
            "storage": {
              "filesystems": [
                {
                  "name": "docker",
                  "mount": {
                    "device": "/dev/xvdc",
                    "wipeFilesystem": true,
                    "label": "docker",
                    "format": "xfs"
                  }
                },
                {
                  "name": "kubelet",
                  "mount": {
                    "device": "/dev/xvdg",
                    "wipeFilesystem": true,
                    "label": "kubelet",
                    "format": "xfs"
                  }
                },
                {
                  "name": "log",
                  "mount": {
                    "device": "/dev/xvdf",
                    "wipeFilesystem": true,
                    "label": "log",
                    "format": "xfs"
                  }
                }
              ]
            }
          }
  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 8y5ck-master
      VpcId: vpc-id
      SecurityGroupIngress:
      
      -
        Description: Allow all traffic to the master instance.
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      -
        Description: Allow traffic from control plane CIDR to 4194 for cadvisor scraping.
        IpProtocol: tcp
        FromPort: 4194
        ToPort: 4194
        CidrIp: 10.1.0.0/16
      -
        Description: Allow traffic from control plane CIDR to 2379 for etcd backup.
        IpProtocol: tcp
        FromPort: 2379
        ToPort: 2379
        CidrIp: 10.1.0.0/16
      -
        Description: Allow traffic from control plane CIDR to 10250 for kubelet scraping.
        IpProtocol: tcp
        FromPort: 10250
        ToPort: 10250
        CidrIp: 10.1.0.0/16
      -
        Description: Allow traffic from control plane CIDR to 10300 for node-exporter scraping.
        IpProtocol: tcp
        FromPort: 10300
        ToPort: 10300
        CidrIp: 10.1.0.0/16
      -
        Description: Allow traffic from control plane CIDR to 10301 for kube-state-metrics scraping.
        IpProtocol: tcp
        FromPort: 10301
        ToPort: 10301
        CidrIp: 10.1.0.0/16
      -
        Description: Only allow ssh traffic from the control plane.
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.1.0.0/16
      Tags:
        - Key: Name
          Value:  8y5ck-master
  EtcdELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 8y5ck-etcd-elb
      VpcId: vpc-id
      SecurityGroupIngress:
      
      -
        IpProtocol: tcp
        FromPort: 2379
        ToPort: 2379
        CidrIp: 0.0.0.0/0
      
      -
        IpProtocol: tcp
        FromPort: 2379
        ToPort: 2379
        CidrIp: 10.1.0.0/16
      
      Tags:
        - Key: Name
          Value: 8y5ck-etcd-elb
  MasterAllowCalicoIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterSecurityGroup
    Properties:
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref MasterSecurityGroup
  MasterAllowEtcdIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterSecurityGroup
    Properties:
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: "tcp"
      FromPort: 2379
      ToPort: 2379
      SourceSecurityGroupId: !Ref EtcdELBSecurityGroup
  VPCDefaultSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outbound traffic from loopback address.
      GroupId: !GetAtt VPC.DefaultSecurityGroup
      IpProtocol: -1
      CidrIp: 127.0.0.1/32
