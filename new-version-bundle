#!/bin/bash

set -eu

prev_version=$1
next_version=$2

pull_request() {
     msg=$1

     git push --set-upstream origin v${next_version}-copy
     pr=$(hub pull-request -a $USER -m "$msg")

     git checkout master
     hub merge $pr
     git push
}

create_copy_branch() {
     git checkout master && git pull origin master
     if [[ $? -ne 0 ]]; then
          echo "ERROR executing: git checkout master && git pull origin master" >&2
          return 1
     fi

     if [[ -z $prev_version ]] || [[ -z $next_version ]]; then
          echo "ERROR prev_version='$prev_version' and next_version='$next_version' must be set" >&2
          return 1
     fi

     if [[ ! -d ./service/controller/clusterapi ]]; then
          echo "ERROR Directory ./service/controller/clusterapi doesn't exist" >&2
          echo "      Make sure you are in your top level project directory" >&2
          return 1
     fi

     if [[ -d ./service/controller/clusterapi/v$next_version ]]; then
          echo "ERROR Directory ./service/controller/clusterapi/v$next_version already exists" >&2
          return 1
     fi

     local branch=v${next_version}-copy

     git checkout -b ${branch}
     if [[ $? -ne 0 ]]; then
          echo "ERROR executing: git checkout -b ${branch}" >&2
          return 1
     fi

     cp -a ./service/controller/clusterapi/v${prev_version} ./service/controller/clusterapi/v${next_version}
     if [[ $? -ne 0 ]]; then
          echo "ERROR executing: cp -a ./service/controller/clusterapi/v${prev_version} ./service/controller/clusterapi/v${next_version}" >&2
          return 1
     fi

     git add ./service/controller/clusterapi/v$next_version
     if [[ $? -ne 0 ]]; then
          echo "ERROR executing: git add ./service/controller/clusterapi/v$next_version" >&2
          return 1
     fi

     git commit -m "v${next_version}: copy v${prev_version}"
     if [[ $? -ne 0 ]]; then
          echo "ERROR executing: git commit -m \"v${next_version}: copy v${prev_version}\"" >&2
          return 1
     fi

     git push origin ${branch}
     if [[ $? -ne 0 ]]; then
          echo "ERROR executing: git push origin ${branch}" >&2
          return 1
     fi

     echo
     echo "Now create a PR to  ${branch} branch."
}

replace() {
     local a=$1
     shift
     local b=$1
     shift
     local dir=$1
     shift
     # escape backshashes
     local a="${a//\//\\/}"
     local b="${b//\//\\/}"
     for file in $(find $dir \( -path ./.git -o -path ./vendor \) -prune -o -type f -print); do
          gsed -i -e "s/${a}/${b}/g" $file
          if [[ $? -ne 0 ]]; then
               echo "ERROR executing: gsed -i -e \"s/${a}/${b}/g\" $file" >&2
               return 1
          fi
     done
}

create_import_branch() {
     git checkout master && git pull origin master
     if [[ $? -ne 0 ]]; then
          echo "ERROR executing: git checkout master && git pull origin master" >&2
          return 1
     fi

     if [[ -z $prev_version ]] || [[ -z $next_version ]]; then
          echo "ERROR prev_version='$prev_version' and next_version='$next_version' must be set" >&2
          return 1
     fi

     if [[ ! -d ./service/controller/clusterapi ]]; then
          echo "ERROR Directory ./service/controller/clusterapi doesn't exist" >&2
          echo "      Make sure you are in your top level project directory" >&2
          return 1
     fi

     local branch=v${next_version}-imports

     git checkout -b ${branch}
     if [[ $? -ne 0 ]]; then
          echo "ERROR executing: git checkout -b ${branch}" >&2
          return 1
     fi

     # Replace imports.
     replace "controller/v$prev_version/" "controller/v$next_version/" ./service/controller/clusterapi/v$next_version
     if [[ $? -ne 0 ]]; then
          echo "ERROR executing: replace \"controller/clusterapi/v$prev_version/\" \"controller/clusterapi/v$next_version/\" ./service/controller/clusterapi/v$next_version" >&2
          return 1
     fi

     # Replace packages.
     replace "package v$prev_version" "package v$next_version" ./service/controller/clusterapi/v$next_version
     if [[ $? -ne 0 ]]; then
          echo "ERROR executing: replace \"package v$prev_version\" \"package v$next_version\" ./service/controller/clusterapi/v$next_version" >&2
          return 1
     fi
     # Replace resource names.
     for resource_dir in $(ls -d ./service/controller/clusterapi/v$next_version/resource/*); do
          local name=$(basename $resource_dir)
          replace "${name}v$prev_version" "${name}v$next_version" $resource_dir
          if [[ $? -ne 0 ]]; then
               echo "ERROR executing: replace \"${name}v$prev_version\" \"${name}v$next_version\" $resource_dir" >&2
               return 1
          fi
     done

     git add ./service/controller/clusterapi/v$next_version
     if [[ $? -ne 0 ]]; then
          echo "ERROR executing: git add ./service/controller/clusterapi/v$next_version" >&2
          return 1
     fi

     git commit -m "controller/v${next_version}: update imports and packages"
     if [[ $? -ne 0 ]]; then
          echo "ERROR executing: git commit -m \"controller/clusterapi/v${next_version}: update imports and packages\"" >&2
          return 1
     fi

     git push origin ${branch}
     if [[ $? -ne 0 ]]; then
          echo "ERROR executing: git push origin ${branch}" >&2
          return 1
     fi

     echo
     echo "Now create a PR to ${branch} branch."
}

create_copy_branch
pull_request "v${next_version}: copy v${prev_version}"
create_import_branch
pull_request "controller/clusterapi/v${next_version}: update imports and packages"
