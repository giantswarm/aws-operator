#cloud-config
hostname: {{.Node.Hostname}}
write_files:
- path: /etc/hosts
  permissions: 0644
  owner: root
  content: |
    127.0.0.1 localhost
    127.0.0.1 {{.Node.Hostname}}
    127.0.0.1 etcd.giantswarm
- path: /srv/10-calico.conf
  owner: root
  permissions: 0755
  content: |
    {
        "name": "calico-k8s-network",
        "type": "calico",
        "etcd_endpoints": "https://{{.Cluster.Etcd.Domain}}:443",
        "log_level": "info",
        "ipam": {
            "type": "calico-ipam"
        },
        "mtu": {{.Cluster.Calico.MTU}},
        "policy": {
            "type": "k8s",
            "k8s_api_root": "https://{{.Cluster.Kubernetes.API.Domain}}/api/v1/",
            "k8s_client_certificate": "/etc/kubernetes/ssl/calico/client.pem",
            "k8s_client_key": "/etc/kubernetes/ssl/calico/client-key.pem",
            "k8s_certificate_authority": "/etc/kubernetes/ssl/calico/client-ca.pem"
        }
    }
- path: /etc/resolv.conf
  permissions: 0644
  owner: root
  content: |
    nameserver 8.8.8.8
    nameserver 8.8.4.4
- path: /etc/kubernetes/config/proxy-kubeconfig.yml
  owner: root
  permissions: 0644
  content: |
    apiVersion: v1
    kind: Config
    users:
    - name: proxy
      user:
        client-certificate: /etc/kubernetes/ssl/worker.pem
        client-key: /etc/kubernetes/ssl/worker-key.pem
    clusters:
    - name: local
      cluster:
        certificate-authority: /etc/kubernetes/ssl/worker-ca.pem
    contexts:
    - context:
        cluster: local
        user: proxy
      name: service-account-context
    current-context: service-account-context
- path: /etc/kubernetes/config/kubelet-kubeconfig.yml
  owner: root
  permissions: 0644
  content: |
    apiVersion: v1
    kind: Config
    users:
    - name: kubelet
      user:
        client-certificate: /etc/kubernetes/ssl/worker.pem
        client-key: /etc/kubernetes/ssl/worker-key.pem
    clusters:
    - name: local
      cluster:
        certificate-authority: /etc/kubernetes/ssl/worker-ca.pem
    contexts:
    - context:
        cluster: local
        user: kubelet
      name: service-account-context
    current-context: service-account-context

- path: /etc/kubernetes/ssl/apiserver-crt.pem.enc
  encoding: gzip+base64
  content: {{.TLSAssets.APIServerCrt}}

- path: /etc/kubernetes/ssl/apiserver-ca.pem.enc
  encoding: gzip+base64
  content: {{.TLSAssets.APIServerCACrt}}

- path: /etc/kubernetes/ssl/apiserver-key.pem.enc
  encoding: gzip+base64
  content: {{.TLSAssets.APIServerKey}}

- path: /etc/kubernetes/ssl/calico/client-crt.pem.enc
  encoding: gzip+base64
  content: {{.TLSAssets.CalicoClientCrt}}

- path: /etc/kubernetes/ssl/calico/client-ca.pem.enc
  encoding: gzip+base64
  content: {{.TLSAssets.CalicoClientCACrt}}

- path: /etc/kubernetes/ssl/calico/client-key.pem.enc
  encoding: gzip+base64
  content: {{.TLSAssets.CalicoClientKey}}

- path: /etc/kubernetes/ssl/etcd/server-crt.pem.enc
  encoding: gzip+base64
  content: {{.TLSAssets.EtcdServerCrt}}

- path: /etc/kubernetes/ssl/etcd/server-ca.pem.enc
  encoding: gzip+base64
  content: {{.TLSAssets.EtcdServerCACrt}}

- path: /etc/kubernetes/ssl/etcd/server-key.pem.enc
  encoding: gzip+base64
  content: {{.TLSAssets.EtcdServerKey}}

{{range .Files}}- path: {{.Metadata.Path}}
  owner: {{.Metadata.Owner}}
  permissions: {{printf "%#o" .Metadata.Permissions}}
  content: |
    {{range .Content}}{{.}}
    {{end}}{{end}}

coreos:
  units:
  - name: update-engine.service
    enable: false
    command: stop
    mask: true
  - name: locksmithd.service
    command: stop
    mask: true
  - name: etcd2.service
    enable: true
    command: start
  - name: fleet.service
    command: stop
    mask: true
  - name: systemd-networkd-wait-online.service
    enable: true
    command: start
  - name: docker.service
    enable: true
    command: start
    drop-ins:
    - name: 10-giantswarm-extra-args.conf
      content: |
        [Service]
        Environment="DOCKER_CGROUPS=--exec-opt native.cgroupdriver=systemd {{.Cluster.Docker.Daemon.ExtraArgs}}
  - name: k8s-setup-network-env.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=k8s-setup-network-env Service
      Wants=network-online.target docker.service
      After=network-online.target docker.service

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      TimeoutStartSec=0
      Environment="IMAGE={{.Cluster.Operator.NetworkSetup.Docker.Image}}
      Environment="NAME=%p.service"
      Environment="NETWORK_CONFIG_CONTAINER="
      ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/cni/net.d/
      ExecStartPre=-/usr/bin/cp /srv/10-calico.conf /etc/kubernetes/cni/net.d/10-calico.conf
      ExecStartPre=/usr/bin/docker pull $IMAGE
      ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
      ExecStartPre=-/usr/bin/docker rm -f $NAME
      ExecStart=/usr/bin/docker run --rm --net=host -v /etc:/etc --name $NAME $IMAGE
      ExecStop=-/usr/bin/docker stop -t 10 $NAME
      ExecStopPost=-/usr/bin/docker rm -f $NAME
  # TODO(nhlfr): Set up Calico on Kubernetes, in example by http://docs.projectcalico.org/v2.0/getting-started/kubernetes/installation/hosted/kubeadm/calico.yaml.
  # Or at least use anything which doesn't download binaries in systemd unit...
  - name: calico-node.service
    runtime: true
    command: start
    content: |
      [Unit]
      Description=calicoctl node
      Requires=k8s-setup-network-env.service
      After=k8s-setup-network-env.service
      Wants=k8s-proxy.service k8s-kubelet.service

      [Service]
      Restart=always
      RestartSec=0
      TimeoutStopSec=10
      StartLimitIntervalSec=0
      EnvironmentFile=/etc/network-environment
      Environment="ETCD_AUTHORITY={{.Cluster.Etcd.Domain}}:443"
      Environment="ETCD_SCHEME=https"
      Environment="ETCD_CA_CERT_FILE=/etc/kubernetes/ssl/calico/client-ca.pem"
      Environment="ETCD_CERT_FILE=/etc/kubernetes/ssl/calico/client.pem"
      Environment="ETCD_KEY_FILE=/etc/kubernetes/ssl/calico/client-key.pem"
      ExecStartPre=/usr/bin/mkdir -p /opt/cni/bin
      ExecStartPre=/usr/bin/wget -O /opt/cni/bin/calico https://s3-eu-west-1.amazonaws.com/downloads.giantswarm.io/calico-cni/v1.4.2/calico
      ExecStartPre=/usr/bin/chmod +x /opt/cni/bin/calico
      ExecStartPre=/usr/bin/wget -O /opt/cni/bin/calico-ipam https://s3-eu-west-1.amazonaws.com/downloads.giantswarm.io/calico-cni/v1.4.2/calico-ipam
      ExecStartPre=/usr/bin/chmod +x /opt/cni/bin/calico-ipam
      ExecStartPre=/usr/bin/mkdir -p /opt/bin/
      ExecStartPre=/usr/bin/wget -O /opt/bin/calicoctl https://s3-eu-west-1.amazonaws.com/downloads.giantswarm.io/calicoctl/v0.22.0/calicoctl
      ExecStartPre=/usr/bin/chmod +x /opt/bin/calicoctl
      ExecStartPre=/bin/bash -c "while [ ! -f /etc/kubernetes/ssl/calico/client-ca.pem ]; do echo 'Waiting for /etc/kubernetes/ssl/calico/client-ca.pem to be written' && sleep 1; done"
      ExecStartPre=/bin/bash -c "while [ ! -f /etc/kubernetes/ssl/calico/client.pem ]; do echo 'Waiting for /etc/kubernetes/ssl/calico/client.pem to be written' && sleep 1; done"
      ExecStartPre=/bin/bash -c "while [ ! -f /etc/kubernetes/ssl/calico/client-key.pem ]; do echo 'Waiting for /etc/kubernetes/ssl/calico/client-key.pem to be written' && sleep 1; done"
      ExecStartPre=/bin/bash -c "while ! curl --output /dev/null --silent --fail --cacert /etc/kubernetes/ssl/calico/client-ca.pem --cert /etc/kubernetes/ssl/calico/client.pem --key /etc/kubernetes/ssl/calico/client-key.pem https://{{.Cluster.Etcd.Domain}}/version; do sleep 1 && echo 'Waiting for etcd master to be responsive'; done"
      ExecStart=/opt/bin/calicoctl node --ip=${DEFAULT_IPV4} --detach=false --node-image=giantswarm/node:v0.22.0
      ExecStartPost=/bin/bash -c "/opt/bin/calicoctl bgp peer add $(echo ${IP_BRIDGE}} | cut -d'.' -f1-3).0 as $(/opt/bin/calicoctl bgp default-node-as)"
      ExecStartPost=/bin/bash -c "/usr/bin/etcdctl --endpoints=https://{{.Cluster.Etcd.Domain}}/443 --ca-file=/etc/kubernetes/ssl/calico/client-ca.pem --cert-file=/etc/kubernetes/ssl/calico/client.pem --key-file=/etc/kubernetes/ssl/calico/client-key.pem set /calico/v1/host/{{.Node.Hostname}}-flannel/bird_ip $(echo ${IP_BRIDGE} | cut -d'.' -f1-3).0"
      ExecStop=/opt/bin/calicoctl node stop --force
      ExecStopPost=/bin/bash -c "find /tmp/ -name '_MEI*' | xargs -I {} rm -rf {}"
      ExecStopPost=/bin/bash -c "/opt/bin/calicoctl bgp peer remove $(echo ${IP_BRIDGE} | cut -d'.' -f1-3).0"
      ExecStopPost=/usr/bin/etcdctl --endpoints=https://{{.Cluster.Etcd.Domain}}:443 --ca-file=/etc/kubernetes/ssl/calico/client-ca.pem --cert-file=/etc/kubernetes/ssl/calico/client.pem --key-file=/etc/kubernetes/ssl/calico/client-key.pem rm /calico/v1/host/{{.Node.Hostname}}-flannel/bird_ip

      [Install]
      WantedBy=multi-user.target
  - name: calico-node-restart.service
    enable: true
    content: |
      [Unit]
      Description=calico-node-restart

      [Service]
      Type=oneshot
      ExecStartPre=/usr/bin/systemctl stop calico-node.service
      ExecStartPre=/usr/bin/bash -c 'while systemctl is-active --quiet calico-node.service; do sleep 1 && echo waiting for calico-node to stop; done'
      ExecStart=/usr/bin/systemctl start calico-node.service

      [Install]
      WantedBy=multi-user.target
  - name: calico-node-restart.timer
    enable: true
    command: start
    content: |
      [Unit]
      Description=Timer

      [Timer]
      OnCalendar=*-01,04,07,10-01 14:00:00
      Unit=calico-node-restart.service

      [Install]
      WantedBy=multi-user.target
  - name: k8s-proxy.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=k8s-proxy
      Requires=calico-node.service
      After=calico-node.service

      [Service]
      Restart=always
      RestartSec=0
      TimeoutStopSec=10
      StartLimitIntervalSec=0
      EnvironmentFile=/etc/network-environment
      Environment="IMAGE={{.Cluster.Kubernetes.Hyperkube.Docker.Image}}
      Environment="NAME=%p.service"
      Environment="NETWORK_CONFIG_CONTAINER="
      ExecStartPre=/usr/bin/docker pull $IMAGE
      ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
      ExecStartPre=-/usr/bin/docker rm -f $NAME
      ExecStartPre=/bin/bash -c "while [ ! -f /etc/kubernetes/ssl/worker-ca.pem ]; do echo 'Waiting for /etc/kubernetes/ssl/worker-ca.pem to be written' && sleep 1; done"
      ExecStartPre=/bin/bash -c "while [ ! -f /etc/kubernetes/ssl/worker.pem ]; do echo 'Waiting for /etc/kubernetes/ssl/worker.pem to be written' && sleep 1; done"
      ExecStartPre=/bin/bash -c "while [ ! -f /etc/kubernetes/ssl/worker-key.pem ]; do echo 'Waiting for /etc/kubernetes/ssl/worker-key.pem to be written' && sleep 1; done"
      ExecStartPre=/bin/sh -c "while ! curl --output /dev/null --silent --head --fail --cacert /etc/kubernetes/ssl/worker-ca.pem --cert /etc/kubernetes/ssl/worker.pem --key /etc/kubernetes/ssl/worker-key.pem https://{{.Cluster.Kubernetes.API.Domain}}; do sleep 1 && echo 'Waiting for master'; done"
      ExecStart=/bin/sh -c "/usr/bin/docker run --rm --net=host --privileged=true \
      --name $NAME \
      -v /usr/share/ca-certificates:/etc/ssl/certs \
      -v /etc/kubernetes/ssl/:/etc/kubernetes/ssl/ \
      -v /etc/kubernetes/config/:/etc/kubernetes/config/ \
      $IMAGE \
      /hyperkube proxy \
      --master=https://{{.Cluster.Kubernetes.API.Domain}} \
      --proxy-mode=iptables \
      --logtostderr=true \
      --kubeconfig=/etc/kubernetes/config/proxy-kubeconfig.yml \
      --v=2"
      ExecStop=-/usr/bin/docker stop -t 10 $NAME
      ExecStopPost=-/usr/bin/docker rm -f $NAME
  - name: k8s-proxy-restart.service
    enable: true
    content: |
      [Unit]
      Description=k8s-proxy-restart

      [Service]
      Type=oneshot
      ExecStartPre=/usr/bin/systemctl stop k8s-proxy.service
      ExecStartPre=/usr/bin/bash -c 'while systemctl is-active --quiet k8s-proxy.service; do sleep 1 && echo waiting for k8s-proxy to stop; done'
      ExecStart=/usr/bin/systemctl start k8s-proxy.service

      [Install]
      WantedBy=multi-user.target
  - name: k8s-proxy-restart.timer
    enable: true
    command: start
    content: |
      [Unit]
      Description=Timer

      [Timer]
      OnCalendar=15:00
      Unit=k8s-proxy-restart.service

      [Install]
      WantedBy=multi-user.target
  - name: k8s-kubelet.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=k8s-kubelet
      Requires=calico-node.service
      After=calico-node.service

      [Service]
      Restart=always
      RestartSec=0
      TimeoutStopSec=10
      StartLimitIntervalSec=0
      EnvironmentFile=/etc/network-environment
      Environment="IMAGE={{.Cluster.Kubernetes.Hyperkube.Docker.Image}}"
      Environment="NAME=%p.service"
      Environment="NETWORK_CONFIG_CONTAINER="
      ExecStartPre=/usr/bin/docker pull $IMAGE
      ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
      ExecStartPre=-/usr/bin/docker rm -f $NAME
      ExecStart=/bin/sh -c "/usr/bin/docker run --rm --pid=host --net=host --privileged=true \
      -v /:/rootfs:ro \
      -v /sys:/sys:ro \
      -v /run/calico/:/run/calico/:rw \
      -v /run/docker/:/run/docker/:rw \
      -v /run/docker.sock:/run/docker.sock:rw \
      -v /usr/lib/os-release:/etc/os-release \
      -v /usr/share/ca-certificates/:/etc/ssl/certs \
      -v /var/lib/docker/:/var/lib/docker:rw \
      -v /var/lib/kubelet/:/var/lib/kubelet:rw,rslave \
      -v /etc/kubernetes/ssl/:/etc/kubernetes/ssl/ \
      -v /etc/kubernetes/config/:/etc/kubernetes/config/ \
      -v /etc/kubernetes/cni/:/etc/kubernetes/cni/ \
      -v /opt/cni/bin/calico:/opt/cni/bin/calico \
      -v /opt/cni/bin/calico-ipam:/opt/cni/bin/calico-ipam \
      -e ETCD_CA_CERT_FILE=/etc/kubernetes/ssl/etcd/client-ca.pem \
      -e ETCD_CERT_FILE=/etc/kubernetes/ssl/etcd/client.pem \
      -e ETCD_KEY_FILE=/etc/kubernetes/ssl/etcd/client-key.pem \
      --name $NAME \
      $IMAGE \
      /hyperkube kubelet \
      --address=${DEFAULT_IPV4} \
      --port=10250 \
      --hostname-override=${DEFAULT_IPV4} \
      --node-ip=${DEFAULT_IPV4} \
      --api-servers=https://{{.Cluster.Kubernetes.API.Domain}} \
      --containerized \
      --enable-server \
      --logtostderr=true \
      --machine-id-file=/rootfs/etc/machine-id \
      --cadvisor-port=4194 \
      --healthz-bind-address=${DEFAULT_IPV4} \
      --healthz-port=10248 \
      --cluster-dns={{.Cluster.Kubernetes.DNS}} \
      --cluster-domain={{.Cluster.Kubernetes.API.Domain}} \
      --network-plugin-dir=/etc/kubernetes/cni/net.d \
      --network-plugin=cni \
      --register-node=true \
      --allow-privileged=true \
      --kubeconfig=/etc/kubernetes/config/kubelet-kubeconfig.yml \
      --node-labels="kubernetes.io/hostname={{.Node.Hostname}},ip=${DEFAULT_IPV4},{{.Cluster.Kubernetes.Kubelet.Labels}}" \
      --v=2"
      ExecStop=-/usr/bin/docker stop -t 10 $NAME
      ExecStopPost=-/usr/bin/docker rm -f $NAME
  - name: k8s-kubelet-restart.service
    enable: true
    content: |
      [Unit]
      Description=k8s-kubelet-restart

      [Service]
      Type=oneshot
      ExecStartPre=/usr/bin/systemctl stop k8s-kubelet.service
      ExecStartPre=/usr/bin/bash -c 'while systemctl is-active --quiet k8s-kubelet.service; do sleep 1 && echo waiting for k8s-kubelet to stop; done'
      ExecStart=/usr/bin/systemctl start k8s-kubelet.service

      [Install]
      WantedBy=multi-user.target
  - name: kubelet-restart.timer
    enable: true
    command: start
    content: |
      [Unit]
      Description=Timer

      [Timer]
      OnCalendar=15:00
      Unit=k8s-kubelet-restart.service

      [Install]
      WantedBy=multi-user.target
  - name: node-exporter.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=Prometheus Node Exporter Service
      Requires=docker.service
      After=docker.service

      [Service]
      Restart=always
      RestartSec=0
      TimeoutStopSec=10
      Environment="IMAGE=prom/node-exporter:0.12.0"
      Environment="NAME=%p.service"
      ExecStartPre=/usr/bin/docker pull $IMAGE
      ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
      ExecStartPre=-/usr/bin/docker rm -f $NAME
      ExecStart=/usr/bin/docker run --rm \
        -p 91:91 \
        --net=host \
        --name $NAME \
        $IMAGE \
        --web.listen-address=:91
      ExecStop=-/usr/bin/docker stop -t 10 $NAME
      ExecStopPost=-/usr/bin/docker rm -f $NAME

      [Install]
      WantedBy=multi-user.target
  - name: decrypt-tls-certs.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=Decrypt TLS certificates

      [Service]
      ExecStart=/opt/bin/decrypt-tls-assets
  {{range .Units}}- name: {{.Metadata.Name}}
    enable: {{.Metadata.Enable}}
    command: {{.Metadata.Command}}
    content: |
      {{range .Content}}{{.}}
      {{end}}{{end}}
  update:
    reboot-strategy: off
