#!/bin/bash

export HOSTNAME=$(hostname | tr '[:upper:]' '[:lower:]')
export KUBECONFIG=/etc/kubernetes/kubeconfig/addons.yaml
export KUBECTL="/opt/bin/hyperkube kubectl"

# wait for healthy master
while [ "$($KUBECTL get nodes $HOSTNAME -o jsonpath='{.metadata.name}')" != "$HOSTNAME" ]; do sleep 1 && echo 'Waiting for healthy k8s'; done

# label namespaces (required for network egress policies)
NAMESPACES="default kube-system" 
for namespace in ${NAMESPACES}
do
    if ! $KUBECTL get namespaces -l name=${namespace} | grep ${namespace}; then
        while
            $KUBECTL label namespace ${namespace} name=${namespace}
            [ "$?" -ne "0" ]
        do
            echo "failed to label namespace ${namespace}, retrying in 5 sec"
            sleep 5s
        done
    fi
done

# apply Security bootstrap (RBAC and PSP)
SECURITY_FILES=""
SECURITY_FILES="${SECURITY_FILES} rbac_bindings.yaml"
SECURITY_FILES="${SECURITY_FILES} rbac_roles.yaml"
SECURITY_FILES="${SECURITY_FILES} psp_policies.yaml"
SECURITY_FILES="${SECURITY_FILES} psp_roles.yaml"
SECURITY_FILES="${SECURITY_FILES} psp_binding.yaml"

for manifest in $SECURITY_FILES
do
    while
        $KUBECTL apply -f /srv/$manifest
        [ "$?" -ne "0" ]
    do
        echo "failed to apply /srv/$manifest, retrying in 5 sec"
        sleep 5s
    done
done

# check for other master and remove it
THIS_MACHINE=$HOSTNAME
for master in $($KUBECTL get nodes --no-headers=true --selector role=master | awk '{print $1}')
do
    if [ "$master" != "$THIS_MACHINE" ]; then
        $KUBECTL delete node $master
    fi
done

# wait for etcd dns (return code 35 is bad certificate which is good enough here)
while
    curl "https://{{ .Cluster.Etcd.Domain }}:{{ .EtcdPort }}" -k 2>/dev/null >/dev/null
    RET_CODE=$?
    [ "$RET_CODE" -ne "35" ]
do
    echo "Waiting for etcd to be ready . . "
    sleep 3s
done

# create kube-proxy configmap
while
    $KUBECTL create configmap kube-proxy --from-file=kube-proxy.yaml=/srv/kube-proxy-config.yaml -o yaml --dry-run | $KUBECTL apply -n kube-system -f -
    [ "$?" -ne "0" ]
do
    echo "failed to configure kube-proxy from /srv/kube-proxy-config.yaml, retrying in 5 sec"
    sleep 5s
done

# install kube-proxy
PROXY_MANIFESTS="kube-proxy-sa.yaml kube-proxy-ds.yaml"
for manifest in $PROXY_MANIFESTS
do
    while
        $KUBECTL apply -f /srv/$manifest
        [ "$?" -ne "0" ]
    do
        echo "failed to apply /srv/$manifest, retrying in 5 sec"
        sleep 5s
    done
done
echo "kube-proxy successfully installed"

# restart ds to apply config from configmap
$KUBECTL delete pods -l k8s-app=kube-proxy -n kube-system

{{ if not .DisableCalico -}}

{{ if eq .Cluster.Kubernetes.CloudProvider "aws" -}}
## Apply AWS VPC CNI and Calico for ensuring network policies (only on AWS)
CNI_FILE="aws-cni.yaml calico-policy-only.yaml"
{{ else -}}
## Apply Calico with all its components
CNI_FILE="calico-all.yaml"
{{ end -}}

for manifest in ${CNI_FILE}
do
    while
        $KUBECTL apply -f /srv/$manifest
        [ "$?" -ne "0" ]
    do
        echo "failed to apply /srv/$manifest, retrying in 5 sec"
        sleep 5s
    done
done

{{ if eq .Cluster.Kubernetes.CloudProvider "aws" -}}
echo "Waiting for aws-node to be ready..."
$KUBECTL -n kube-system -l k8s-app=aws-node wait --for=condition=Ready --timeout=10m pods
{{ end -}}

echo "Waiting for calico-node to be ready..."
$KUBECTL -n kube-system -l k8s-app=calico-node wait --for=condition=Ready --timeout=10m pods

{{ end -}}

# apply default storage class
if [ -f /srv/default-storage-class.yaml ]; then
    while
        $KUBECTL apply -f /srv/default-storage-class.yaml
        [ "$?" -ne "0" ]
    do
        echo "failed to apply /srv/default-storage-class.yaml, retrying in 5 sec"
        sleep 5s
    done
else
    echo "no default storage class to apply"
fi

# apply priority classes:
PRIORITY_CLASSES_FILE="priority_classes.yaml"

while
    $KUBECTL apply -f /srv/$PRIORITY_CLASSES_FILE
    [ "$?" -ne "0" ]
do
    echo "failed to apply /srv/$PRIORITY_CLASSES_FILE, retrying in 5 sec"
    sleep 5s
done

# apply network policies:
NETWORK_POLICIES_FILE="network_policies.yaml"
NAMESPACES="kube-system giantswarm"
for namespace in ${NAMESPACES}; do
    while
      $KUBECTL apply -f /srv/$NETWORK_POLICIES_FILE -n $namespace
      [ "$?" -ne "0" ]
    do
      echo "failed to apply /srv/$NETWORK_POLICIES_FILE, retrying in 5 sec"
      sleep 5s
    done
done

# apply k8s addons
MANIFESTS=""
{{ range .ExtraManifests -}}
MANIFESTS="${MANIFESTS} {{ . }}"
{{ end -}}
{{ if not .DisableIngressControllerService -}}
MANIFESTS="${MANIFESTS} ingress-controller-svc.yaml"
{{ end -}}

for manifest in $MANIFESTS
do
    while
        $KUBECTL apply -f /srv/$manifest
        [ "$?" -ne "0" ]
    do
        echo "failed to apply /srv/$manifest, retrying in 5 sec"
        sleep 5s
    done
done
echo "Addons successfully installed"
