apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-operator-configmap
  namespace: giantswarm
data:
  config.yaml: |
    server:
      listen:
        address: 'http://0.0.0.0:8000'
    service:
      aws:
        accessLogsExpiration: '{{ .Values.Installation.V1.Provider.AWS.S3AccessLogsExpiration }}'
        advancedMonitoringEC2: '{{ .Values.Installation.V1.Provider.AWS.AdvancedMonitoringEC2 }}'
        loggingBucket:
          delete: '{{ .Values.Installation.V1.Provider.AWS.DeleteLoggingBucket }}'
        podInfraContainerImage: '{{ .Values.Installation.V1.Provider.AWS.PodInfraContainerImage }}'
        region: '{{ .Values.Installation.V1.Provider.AWS.Region }}'
        route53:
          enabled: '{{ .Values.Installation.V1.Provider.AWS.Route53.Enabled }}'
      guest:
        update:
          enabled: {{ .Values.Installation.V1.Guest.Update.Enabled }}
      installation:
        name: '{{ .Values.Installation.V1.Name }}'
        {{- if .Values.Installation.V1.Guest }}
        guest:
          kubernetes:
            api:
              auth:
                provider:
                  oidc:
                    clientID: '{{ .Values.Installation.V1.Guest.Kubernetes.API.Auth.Provider.OIDC.ClientID }}'
                    issuerURL: '{{ .Values.Installation.V1.Guest.Kubernetes.API.Auth.Provider.OIDC.IssuerURL }}'
                    usernameClaim: '{{ .Values.Installation.V1.Guest.Kubernetes.API.Auth.Provider.OIDC.UsernameClaim }}'
                    groupsClaim: '{{ .Values.Installation.V1.Guest.Kubernetes.API.Auth.Provider.OIDC.GroupsClaim }}'
              security:
                whitelist:
                  enabled: {{ .Values.Installation.V1.Security.RestrictAccess.Enabled }}
                  {{- if .Values.Installation.V1.Security.RestrictAccess.Enabled }}
                  subnetList: {{ .Values.Installation.V1.Security.RestrictAccess.WhitelistSubnets  }}
                  {{- end }}
        {{- end }}
      kubernetes:
        incluster: true
