apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-operator-configmap
  namespace: {{ .Values.namespace }}
data:
  config.yaml: |
    server:
      enable:
        debug:
          server: true
      listen:
        address: 'http://0.0.0.0:8000'
    service:
      aws:
        accessLogsExpiration: '{{ .Values.Installation.V1.Provider.AWS.S3AccessLogsExpiration }}'
        advancedMonitoringEC2: '{{ .Values.Installation.V1.Provider.AWS.AdvancedMonitoringEC2 }}'
        availabilityZones: '{{ range $index, $element := .Values.Installation.V1.Provider.AWS.AvailabilityZones }}{{if $index}} {{end}}{{$element}}{{end}}'
        encrypter: '{{ .Values.Installation.V1.Provider.AWS.Encrypter }}'
        includeTags: '{{ .Values.Installation.V1.Provider.AWS.IncludeTags }}'
        loggingBucket:
          delete: '{{ .Values.Installation.V1.Provider.AWS.DeleteLoggingBucket }}'
        podInfraContainerImage: '{{ .Values.Installation.V1.Provider.AWS.PodInfraContainerImage }}'
        region: '{{ .Values.Installation.V1.Provider.AWS.Region }}'
        route53:
          enabled: '{{ .Values.Installation.V1.Provider.AWS.Route53.Enabled }}'
        routeTables: '{{ .Values.Installation.V1.Provider.AWS.RouteTableNames }}'
        trustedAdvisor:
          enabled: '{{ .Values.Installation.V1.Provider.AWS.TrustedAdvisor.Enabled }}'
        vaultAddress: '{{ .Values.Installation.V1.Auth.Vault.Address }}'
        vpcPeerID: '{{ .Values.Installation.V1.Provider.AWS.VPCPeerID }}'
      cluster:
        calico:
          cidr: '{{ .Values.Installation.V1.Guest.Calico.CIDR }}'
          mtu: 1430
          subnet: '{{ .Values.Installation.V1.Guest.Calico.Subnet }}'
        docker:
          daemon:
            cidr: '{{ .Values.Installation.V1.Guest.Docker.CIDR }}'
        kubernetes:
          api:
            clusterIPRange: '{{ .Values.Installation.V1.Guest.Kubernetes.API.ClusterIPRange }}'
          kubelet:
            imagePullProgressDeadline: '{{ .Values.Installation.V1.Guest.Kubernetes.Kubelet.ImagePullProgressDeadline }}'
          networkSetup:
            docker:
              image: '{{ .Values.Installation.V1.Registry.Domain }}/giantswarm/k8s-setup-network-environment:1f4ffc52095ac368847ce3428ea99b257003d9b9'
          ssh:
            userList: '{{ .Values.Installation.V1.Guest.SSH.UserList }}'
      guest:
        ssh:
          ssoPublicKey: '{{ .Values.Installation.V1.Guest.SSH.SSOPublicKey }}'
      registryDomain: '{{ .Values.Installation.V1.Registry.Domain }}'
      installation:
        name: '{{ .Values.Installation.V1.Name }}'
        {{- if .Values.Installation.V1.Guest }}
        guest:
          ipam:
            network:
              CIDR: '{{ .Values.Installation.V1.Guest.IPAM.NetworkCIDR }}'
              subnetMaskBits: '{{ .Values.Installation.V1.Guest.IPAM.CIDRMask }}'
              privateSubnetMaskBits: '{{ .Values.Installation.V1.Guest.IPAM.PrivateSubnetMask }}'
              publicSubnetMaskBits: '{{ .Values.Installation.V1.Guest.IPAM.PublicSubnetMask }}'
          kubernetes:
            api:
              auth:
                provider:
                  oidc:
                    clientID: '{{ .Values.Installation.V1.Guest.Kubernetes.API.Auth.Provider.OIDC.ClientID }}'
                    issuerURL: '{{ .Values.Installation.V1.Guest.Kubernetes.API.Auth.Provider.OIDC.IssuerURL }}'
                    usernameClaim: '{{ .Values.Installation.V1.Guest.Kubernetes.API.Auth.Provider.OIDC.UsernameClaim }}'
                    groupsClaim: '{{ .Values.Installation.V1.Guest.Kubernetes.API.Auth.Provider.OIDC.GroupsClaim }}'
              security:
                whitelist:
                  public:
                    enabled: {{ .Values.Installation.V1.Security.RestrictAccess.GuestAPI.Public }}
                    {{- if .Values.Installation.V1.Security.RestrictAccess.GuestAPI.Public }}
                    subnetList: "{{ .Values.Installation.V1.Security.Subnet.VPN }},{{ .Values.Installation.V1.Security.Subnet.Customer.Public }}"
                    {{- end }}
                  private:
                    enabled: {{ .Values.Installation.V1.Security.RestrictAccess.GuestAPI.Private }}
                    {{- if .Values.Installation.V1.Security.RestrictAccess.GuestAPI.Private }}
                    subnetList: "{{ .Values.Installation.V1.Security.Subnet.VPN }},{{ .Values.Installation.V1.Security.Subnet.Customer.Private }}"
                    {{- end }}
        {{- end }}
      kubernetes:
        incluster: true
