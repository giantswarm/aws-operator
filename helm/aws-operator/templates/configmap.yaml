apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "resource.default.name" . }}
  namespace: {{ include "resource.default.namespace" . }}
  labels:
    {{- include "labels.common" . | nindent 4 }}
data:
  config.yaml: |
    server:
      enable:
        debug:
          server: true
      listen:
        address: 'http://0.0.0.0:8000'
    service:
      aws:
        accessLogsExpiration: '{{ .Values.aws.s3AccessLogsExpiration }}'
        advancedMonitoringEC2: '{{ .Values.aws.advancedMonitoringEC2 }}'
        availabilityZones: '{{ range $i, $e := .Values.aws.availabilityZones }}{{ if $i }},{{end}}{{ $e }}{{end}}'
        includeTags: '{{ .Values.aws.includeTags }}'
        loggingBucket:
          delete: '{{ .Values.aws.loggingBucket.delete }}'
        podInfraContainerImage: '{{ .Values.aws.podInfraContainerImage }}'
        region: '{{ .Values.aws.region }}'
        role:
          arn: '{{ .Values.aws.role.arn }}'
        route53:
          enabled: '{{ .Values.aws.rout53.enabled }}'
        routeTables: '{{ .Values.aws.routeTables }}'
        trustedAdvisor:
          enabled: '{{ .Values.aws.trustedAdvisor.enabled }}'
        vaultAddress: '{{ .Values.aws.vault.address }}'
        cni:
          externalSNAT: '{{ .Values.aws.cni.externalSNAT }}'
      cluster:
        calico:
          cidr: '{{ .Values.cluster.calico.cidr }}'
          mtu: '{{ .Values.cluster.calico.mtu }}'
          subnet: '{{ .Values.cluster.calico.subnet }}'
        docker:
          daemon:
            cidr: '{{ .Values.cluster.docker.daemon.cidr }}'
        kubernetes:
          api:
            clusterIPRange: '{{ .Values.cluster.kubernetes.api.ClusterIPRange }}'
          clusterDomain: '{{ .Values.cluster.kubernetes.clusterDomain }}'
          networkSetup:
            docker:
              image: '{{ .Values.cluster.kubernetes.networkSetup.image }}'
          ssh:
            userList: '{{ .Values.cluster.ssh.userList }}'
      guest:
        ssh:
          ssoPublicKey: '{{ .Values.cluster.ssh.ssoPublicKey }}'

      registry:
        domain: '{{ .Values.registry.domain }}'
        mirrors: '{{ range $i, $e := .Values.registry.mirrors }}{{ if $i }},{{end}}{{ $e }}{{end}}'
      installation:
        name: '{{ .Values.installation.name }}'
        {{- if .Values.installation.tenant }}
        guest:
          ipam:
            network:
              CIDR: '{{ .Values.installation.tenant.ipam.networkCIDR }}'
              subnetMaskBits: '{{ .Values.installation.tenant.ipam.network.subnetMaskBits }}'
              privateSubnetMaskBits: '{{ .Values.installation.tenant.ipam.network.privateSubnetMask }}'
              publicSubnetMaskBits: '{{ .Values.installation.tenant.ipam.network.publicSubnetMaskBits }}'
          kubernetes:
            api:
              auth:
                provider:
                  oidc:
                    clientID: '{{ .Values.installation.tenant.kuberetes.api.auth.provider.oidc.clientID }}'
                    issuerURL: '{{ .Values.installation.tenant.kubernes.api.auth.provider.oidc.issuerURL }}'
                    usernameClaim: '{{ .Values.installation.tenant.kubernetes.api.auth.provider.oidc.usernameClaim }}'
                    groupsClaim: '{{ .Values.installation.tenant.kubernetes.api.auth.provider.oidc.groupsClaim }}'
              security:
                whitelist:
                  public:
                    enabled: {{ .Values.instalation.tenant.kubernetes.api.security.whitelist.public.enabled }}
                    {{- if .Values.installation.tenant.kubernetes.api.security.whitelist.public.enabled }}
                    subnetList: "{{ .Values.installation.tenant.kubernetes.api.security.whitelist.public.subnetList }}"
                    {{- end }}
                  private:
                    enabled: {{ .Values.installation.tenant.kubernetes.api.security.whitelist.private.enabled }}
                    {{- if .Values.installation.tenant.kubernetes.api.security.whitelist.private.enabled }}
                    subnetList: "{{ .Values.installation.tenant.kubernetes.api.security.whitelist.private.subnetList }}"
                    {{- end }}
        {{- end }}
      kubernetes:
        incluster: true
