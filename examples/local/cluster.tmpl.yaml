apiVersion: "cluster.giantswarm.io/v1"
kind: Aws
metadata:
  name: ${CLUSTER_NAME}
spec:
  cluster:
    cluster:
      id: "${CLUSTER_NAME}"

    customer:
      id: "example-customer"

    docker:
      imageNamespace: "giantswarm"

    etcd:
      domain: "etcd.${CLUSTER_NAME}.${COMMON_DOMAIN}"
      prefix: "${CLUSTER_NAME}"
      port: 2379

    calico:
      subnet: "192.168.0.0"
      cidr: 24
      mtu: 1500

    kubernetes:
      api:
        domain: "api.${CLUSTER_NAME}.${COMMON_DOMAIN}"
        insecurePort: 8080
        ip: "172.31.0.1"
        securePort: 443
        clusterIPRange: "172.31.0.0/24"
      cloudProvider: "aws"
      dns:
        ip: "172.31.0.10"
      domain: "cluster.local"
      hyperkube:
        docker:
          image: "quay.io/giantswarm/hyperkube:v1.7.3_coreos.0"
      ingressController:
        docker:
          image: "quay.io/giantswarm/nginx-ingress-controller:0.9.0-beta.11"
        insecurePort: 30010
        securePort: 30011
        domain: "ingress.${CLUSTER_NAME}.${COMMON_DOMAIN}"
        wildcardDomain: "*.${CLUSTER_NAME}.${COMMON_DOMAIN}"
      kubectl:
        docker:
          image: "quay.io/giantswarm/docker-kubectl:f51f93c30d27927d2b33122994c0929b3e6f2432"
      kubelet:
        port: 10250
      networkSetup:
        docker:
          image: "giantswarm/k8s-setup-network-environment:ba2b57155d859a1fc5d378c2a09a77d7c2c755ed"

    masters:
    - hostname: "master-1"

    workers:
    - hostname: "worker-1"

  aws:
    region: "${AWS_REGION}"
    az: "${AWS_AZ}"
    hostedZones:
      api: "${AWS_API_HOSTED_ZONE}"
      etcd: "${AWS_API_HOSTED_ZONE}"
      ingress: "${AWS_INGRESS_HOSTED_ZONE}"
    vpc:
      cidr: "10.1.5.0/24"
      privateSubnetCidr: "10.1.5.0/25"
      publicSubnetCidr: "10.1.5.128/25"
      peerid: "${AWS_VPC_PEER_ID}"

    masters:
    - imageid: "${AWS_AMI}"
      instancetype: "${AWS_INSTANCE_TYPE_MASTER}"

    workers:
    - imageid: "${AWS_AMI}"
      instancetype: "${AWS_INSTANCE_TYPE_WORKER}"
